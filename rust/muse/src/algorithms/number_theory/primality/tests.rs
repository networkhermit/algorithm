use crate::algorithms::number_theory::tests::{
    UniqueCategorySample as Sample, unique_category_derive,
};

use super::*;

use Category::{Composite, None, Prime};

#[derive(Debug, Eq, PartialEq)]
pub(crate) enum Category {
    Composite,
    None,
    Prime,
}

const SAMPLE: [Sample<i64, Category>; 256] = [
    Sample(0, None),
    Sample(1, None),
    Sample(2, Prime),
    Sample(3, Prime),
    Sample(4, Composite),
    Sample(5, Prime),
    Sample(6, Composite),
    Sample(7, Prime),
    Sample(8, Composite),
    Sample(9, Composite),
    Sample(10, Composite),
    Sample(11, Prime),
    Sample(12, Composite),
    Sample(13, Prime),
    Sample(14, Composite),
    Sample(15, Composite),
    Sample(16, Composite),
    Sample(17, Prime),
    Sample(18, Composite),
    Sample(19, Prime),
    Sample(20, Composite),
    Sample(21, Composite),
    Sample(22, Composite),
    Sample(23, Prime),
    Sample(24, Composite),
    Sample(25, Composite),
    Sample(26, Composite),
    Sample(27, Composite),
    Sample(28, Composite),
    Sample(29, Prime),
    Sample(30, Composite),
    Sample(31, Prime),
    Sample(32, Composite),
    Sample(33, Composite),
    Sample(34, Composite),
    Sample(35, Composite),
    Sample(36, Composite),
    Sample(37, Prime),
    Sample(38, Composite),
    Sample(39, Composite),
    Sample(40, Composite),
    Sample(41, Prime),
    Sample(42, Composite),
    Sample(43, Prime),
    Sample(44, Composite),
    Sample(45, Composite),
    Sample(46, Composite),
    Sample(47, Prime),
    Sample(48, Composite),
    Sample(49, Composite),
    Sample(50, Composite),
    Sample(51, Composite),
    Sample(52, Composite),
    Sample(53, Prime),
    Sample(54, Composite),
    Sample(55, Composite),
    Sample(56, Composite),
    Sample(57, Composite),
    Sample(58, Composite),
    Sample(59, Prime),
    Sample(60, Composite),
    Sample(61, Prime),
    Sample(62, Composite),
    Sample(63, Composite),
    Sample(64, Composite),
    Sample(65, Composite),
    Sample(66, Composite),
    Sample(67, Prime),
    Sample(68, Composite),
    Sample(69, Composite),
    Sample(70, Composite),
    Sample(71, Prime),
    Sample(72, Composite),
    Sample(73, Prime),
    Sample(74, Composite),
    Sample(75, Composite),
    Sample(76, Composite),
    Sample(77, Composite),
    Sample(78, Composite),
    Sample(79, Prime),
    Sample(80, Composite),
    Sample(81, Composite),
    Sample(82, Composite),
    Sample(83, Prime),
    Sample(84, Composite),
    Sample(85, Composite),
    Sample(86, Composite),
    Sample(87, Composite),
    Sample(88, Composite),
    Sample(89, Prime),
    Sample(90, Composite),
    Sample(91, Composite),
    Sample(92, Composite),
    Sample(93, Composite),
    Sample(94, Composite),
    Sample(95, Composite),
    Sample(96, Composite),
    Sample(97, Prime),
    Sample(98, Composite),
    Sample(99, Composite),
    Sample(100, Composite),
    Sample(101, Prime),
    Sample(102, Composite),
    Sample(103, Prime),
    Sample(104, Composite),
    Sample(105, Composite),
    Sample(106, Composite),
    Sample(107, Prime),
    Sample(108, Composite),
    Sample(109, Prime),
    Sample(110, Composite),
    Sample(111, Composite),
    Sample(112, Composite),
    Sample(113, Prime),
    Sample(114, Composite),
    Sample(115, Composite),
    Sample(116, Composite),
    Sample(117, Composite),
    Sample(118, Composite),
    Sample(119, Composite),
    Sample(120, Composite),
    Sample(121, Composite),
    Sample(122, Composite),
    Sample(123, Composite),
    Sample(124, Composite),
    Sample(125, Composite),
    Sample(126, Composite),
    Sample(127, Prime),
    Sample(170, Composite),
    Sample(271, Prime),
    Sample(357, Composite),
    Sample(225, Composite),
    Sample(440, Composite),
    Sample(235, Composite),
    Sample(274, Composite),
    Sample(383, Prime),
    Sample(313, Prime),
    Sample(434, Composite),
    Sample(222, Composite),
    Sample(137, Prime),
    Sample(155, Composite),
    Sample(465, Composite),
    Sample(249, Composite),
    Sample(141, Composite),
    Sample(5307, Composite),
    Sample(6374, Composite),
    Sample(951, Composite),
    Sample(7236, Composite),
    Sample(2027, Prime),
    Sample(2382, Composite),
    Sample(2251, Prime),
    Sample(757, Prime),
    Sample(6678, Composite),
    Sample(3206, Composite),
    Sample(6257, Prime),
    Sample(615, Composite),
    Sample(1677, Composite),
    Sample(2086, Composite),
    Sample(4158, Composite),
    Sample(4723, Prime),
    Sample(7755, Composite),
    Sample(1583, Prime),
    Sample(6547, Prime),
    Sample(4219, Prime),
    Sample(660, Composite),
    Sample(7698, Composite),
    Sample(3121, Prime),
    Sample(3881, Prime),
    Sample(2541, Composite),
    Sample(4696, Composite),
    Sample(4091, Prime),
    Sample(5222, Composite),
    Sample(4021, Prime),
    Sample(5839, Prime),
    Sample(6048, Composite),
    Sample(5521, Prime),
    Sample(47908, Composite),
    Sample(35060, Composite),
    Sample(47361, Composite),
    Sample(48859, Prime),
    Sample(56067, Composite),
    Sample(70451, Prime),
    Sample(9735, Composite),
    Sample(19763, Prime),
    Sample(97943, Prime),
    Sample(9933, Composite),
    Sample(61651, Prime),
    Sample(11407, Composite),
    Sample(8774, Composite),
    Sample(48383, Prime),
    Sample(51001, Prime),
    Sample(73029, Composite),
    Sample(27690, Composite),
    Sample(30466, Composite),
    Sample(71479, Prime),
    Sample(84701, Prime),
    Sample(28643, Prime),
    Sample(57075, Composite),
    Sample(99745, Composite),
    Sample(100921, Composite),
    Sample(40496, Composite),
    Sample(9798, Composite),
    Sample(41603, Prime),
    Sample(46912, Composite),
    Sample(49852, Composite),
    Sample(55871, Prime),
    Sample(10993, Prime),
    Sample(79657, Prime),
    Sample(609680, Composite),
    Sample(180540, Composite),
    Sample(147672, Composite),
    Sample(819031, Prime),
    Sample(149623, Prime),
    Sample(1_056_048, Composite),
    Sample(483389, Prime),
    Sample(452831, Prime),
    Sample(415109, Prime),
    Sample(185021, Prime),
    Sample(715823, Prime),
    Sample(744081, Composite),
    Sample(1_276_157, Prime),
    Sample(192978, Composite),
    Sample(631537, Prime),
    Sample(554226, Composite),
    Sample(653111, Prime),
    Sample(607346, Composite),
    Sample(452539, Prime),
    Sample(815939, Prime),
    Sample(247199, Composite),
    Sample(1_245_953, Prime),
    Sample(974803, Prime),
    Sample(185813, Prime),
    Sample(1_261_831, Prime),
    Sample(443227, Prime),
    Sample(1_057_294, Composite),
    Sample(427241, Prime),
    Sample(627391, Prime),
    Sample(1_019_663, Prime),
    Sample(629142, Composite),
    Sample(164503, Prime),
    Sample(6_006_421, Prime),
    Sample(9_499_199, Prime),
    Sample(12_598_247, Prime),
    Sample(13_919_909, Prime),
    Sample(8_975_950, Composite),
    Sample(6_655_578, Composite),
    Sample(2_388_697, Prime),
    Sample(14_018_237, Composite),
    Sample(7_871_261, Prime),
    Sample(1_678_013, Prime),
    Sample(2_654_027, Prime),
    Sample(10_142_801, Prime),
    Sample(2_291_487, Composite),
    Sample(3_893_849, Prime),
    Sample(1_308_913, Composite),
    Sample(14_162_880, Composite),
];

pub(crate) fn derive(f: &dyn Fn(i64) -> bool, c: Category) -> impl Fn() + '_ {
    unique_category_derive(f, &SAMPLE, c)
}

#[test]
fn test_primality() {
    derive(&is_prime, Prime)();

    derive(&is_composite, Composite)();
}

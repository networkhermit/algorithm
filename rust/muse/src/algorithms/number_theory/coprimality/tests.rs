use crate::algorithms::number_theory::tests::{
    mn_unique_category_derive, MNUniqueCategorySample as Sample,
};

use super::*;

const SAMPLE: [Sample<i64, bool>; 128] = [
    Sample(0, 1, true),
    Sample(1, 0, true),
    Sample(1, 1, true),
    Sample(-1, -1, true),
    Sample(15, -45, false),
    Sample(-7, 51, true),
    Sample(-3, 75, false),
    Sample(-84, -32, false),
    Sample(-21, -71, true),
    Sample(89, -11, true),
    Sample(-40, -9, true),
    Sample(92, 26, false),
    Sample(14, -95, true),
    Sample(5, -99, true),
    Sample(-45, -57, false),
    Sample(59, -97, true),
    Sample(-16, 37, true),
    Sample(97, 49, true),
    Sample(5998, -3871, true),
    Sample(-2152, -2909, true),
    Sample(8823, 629, false),
    Sample(7589, -7035, true),
    Sample(-8669, 6398, true),
    Sample(1059, 3522, false),
    Sample(9892, -2990, false),
    Sample(-1819, 4740, true),
    Sample(7900, -7244, false),
    Sample(8072, -1226, false),
    Sample(-6875, 5777, true),
    Sample(-828, 8859, false),
    Sample(-3929, 1143, true),
    Sample(-5397, 1880, true),
    Sample(-9397, -4343, true),
    Sample(2389, -4026, true),
    Sample(-6838, -7802, false),
    Sample(-6118, 7944, false),
    Sample(1408, -8483, true),
    Sample(-507, 3510, false),
    Sample(5030, -4818, false),
    Sample(2563, -1867, true),
    Sample(3317, -4585, true),
    Sample(-2448, -2215, true),
    Sample(-1982, -3811, true),
    Sample(645, 7907, true),
    Sample(5812, 1657, true),
    Sample(3944, -5997, true),
    Sample(-2410, -6522, false),
    Sample(4565, 9055, false),
    Sample(8478, 1099, false),
    Sample(6444, -7298, false),
    Sample(7606, -7006, false),
    Sample(2491, -2017, true),
    Sample(7151, -9724, true),
    Sample(2958, -5697, false),
    Sample(5134, -7701, false),
    Sample(-3544, 9042, false),
    Sample(8826, -4548, false),
    Sample(6794, -5322, false),
    Sample(-6906, 7502, false),
    Sample(172, 8480, false),
    Sample(8244, 4622, false),
    Sample(-7315, 5253, true),
    Sample(7011, 4285, true),
    Sample(-3132, -4999, true),
    Sample(-7332, -655, true),
    Sample(9661, -1750, true),
    Sample(7560, -3128, false),
    Sample(1334, 6234, false),
    Sample(8075, 6450, false),
    Sample(3283, 8980, true),
    Sample(3364, 8482, false),
    Sample(4909, 8302, true),
    Sample(9332, -2523, true),
    Sample(-8515, 5209, true),
    Sample(-1624, 7640, false),
    Sample(-6463, 2562, true),
    Sample(7912, 5868, false),
    Sample(-4825, -2173, true),
    Sample(28876, 30106, false),
    Sample(-929840, 887043, true),
    Sample(684923, -588038, true),
    Sample(-291411, -299801, true),
    Sample(-905447, -402122, true),
    Sample(830872, -223425, true),
    Sample(831033, -753398, true),
    Sample(-575558, 711716, false),
    Sample(-312296, 515492, false),
    Sample(595308, 963205, false),
    Sample(-770718, -388434, false),
    Sample(353889, 330806, true),
    Sample(-174566, 613742, false),
    Sample(-884075, 26687, true),
    Sample(390743, 204874, true),
    Sample(930615, 86524, true),
    Sample(-84_945_524, 15_427_487, true),
    Sample(76_038_602, -89_688_904, false),
    Sample(50_294_214, -65_802_481, true),
    Sample(83_436_075, 44_248_708, true),
    Sample(54_031_677, 92_370_464, true),
    Sample(-6_019_575, -1_302_029, true),
    Sample(86_952_873, -75_470_243, true),
    Sample(-53_215_372, 28_947_490, false),
    Sample(-37_109_442, 75_623_090, false),
    Sample(-11_656_183, 16_147_085, true),
    Sample(86_439_843, -12_134_914, true),
    Sample(-52_977_427, 48_349_835, true),
    Sample(16_234_161, 26_103_566, true),
    Sample(73_756_826, -6_586_797, true),
    Sample(6_836_355, 11_529_043, true),
    Sample(29_864_126, -80_782_077, true),
    Sample(1_646_787_325, 1_961_513_442, true),
    Sample(-1_755_035_190, -1_801_169_490, false),
    Sample(-1_509_018_194, 1_829_751_775, true),
    Sample(-720_160_017, -1_425_309_680, true),
    Sample(1_216_287_038, 1_821_933_798, false),
    Sample(-1_925_479_607, -1_842_455_762, true),
    Sample(-795_996_486, -1_859_155_567, true),
    Sample(-367_280_505, 321_267_794, true),
    Sample(829_304_526, -1_575_808_585, true),
    Sample(1_457_917_042, 1_083_382_210, false),
    Sample(-377_130_535, 1_526_538_188, true),
    Sample(-1_109_347_700, -1_819_333_109, true),
    Sample(-1_740_794_578, 278_770_346, false),
    Sample(448_156_480, -1_008_775_746, false),
    Sample(442_691_160, 1_680_572_092, false),
    Sample(1_241_208_470, -647_438_045, false),
    Sample(2_147_483_647, -561_158_902, true),
    Sample(761_395_308, -2_147_483_647, true),
];

pub(crate) fn derive(f: &dyn Fn(i64, i64) -> bool) -> impl Fn() + '_ {
    mn_unique_category_derive(f, &SAMPLE, true)
}

#[test]
fn test_coprimality() {
    derive(&reduce_to_binary_gcd)();

    derive(&reduce_to_euclidean)();
}

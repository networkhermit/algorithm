#include <fun/vac/algorithms/number_theory/Coprimality.hpp>
#include <fun/vac/util/TestRunner.hpp>

using namespace std;

bool testCoprimality() {
    long sample[][3] = {
        {             0,              1, 1},
        {             1,              0, 1},
        {             1,              1, 1},
        {            -1,             -1, 1},
        {            15,            -45, 0},
        {            -7,             51, 1},
        {            -3,             75, 0},
        {           -84,            -32, 0},
        {           -21,            -71, 1},
        {            89,            -11, 1},
        {           -40,             -9, 1},
        {            92,             26, 0},
        {            14,            -95, 1},
        {             5,            -99, 1},
        {           -45,            -57, 0},
        {            59,            -97, 1},
        {           -16,             37, 1},
        {            97,             49, 1},
        {          5998,          -3871, 1},
        {         -2152,          -2909, 1},
        {          8823,            629, 0},
        {          7589,          -7035, 1},
        {         -8669,           6398, 1},
        {          1059,           3522, 0},
        {          9892,          -2990, 0},
        {         -1819,           4740, 1},
        {          7900,          -7244, 0},
        {          8072,          -1226, 0},
        {         -6875,           5777, 1},
        {          -828,           8859, 0},
        {         -3929,           1143, 1},
        {         -5397,           1880, 1},
        {         -9397,          -4343, 1},
        {          2389,          -4026, 1},
        {         -6838,          -7802, 0},
        {         -6118,           7944, 0},
        {          1408,          -8483, 1},
        {          -507,           3510, 0},
        {          5030,          -4818, 0},
        {          2563,          -1867, 1},
        {          3317,          -4585, 1},
        {         -2448,          -2215, 1},
        {         -1982,          -3811, 1},
        {           645,           7907, 1},
        {          5812,           1657, 1},
        {          3944,          -5997, 1},
        {         -2410,          -6522, 0},
        {          4565,           9055, 0},
        {          8478,           1099, 0},
        {          6444,          -7298, 0},
        {          7606,          -7006, 0},
        {          2491,          -2017, 1},
        {          7151,          -9724, 1},
        {          2958,          -5697, 0},
        {          5134,          -7701, 0},
        {         -3544,           9042, 0},
        {          8826,          -4548, 0},
        {          6794,          -5322, 0},
        {         -6906,           7502, 0},
        {           172,           8480, 0},
        {          8244,           4622, 0},
        {         -7315,           5253, 1},
        {          7011,           4285, 1},
        {         -3132,          -4999, 1},
        {         -7332,           -655, 1},
        {          9661,          -1750, 1},
        {          7560,          -3128, 0},
        {          1334,           6234, 0},
        {          8075,           6450, 0},
        {          3283,           8980, 1},
        {          3364,           8482, 0},
        {          4909,           8302, 1},
        {          9332,          -2523, 1},
        {         -8515,           5209, 1},
        {         -1624,           7640, 0},
        {         -6463,           2562, 1},
        {          7912,           5868, 0},
        {         -4825,          -2173, 1},
        {         28876,          30106, 0},
        {       -929840,         887043, 1},
        {        684923,        -588038, 1},
        {       -291411,        -299801, 1},
        {       -905447,        -402122, 1},
        {        830872,        -223425, 1},
        {        831033,        -753398, 1},
        {       -575558,         711716, 0},
        {       -312296,         515492, 0},
        {        595308,         963205, 0},
        {       -770718,        -388434, 0},
        {        353889,         330806, 1},
        {       -174566,         613742, 0},
        {       -884075,          26687, 1},
        {        390743,         204874, 1},
        {        930615,          86524, 1},
        {   -84'945'524,     15'427'487, 1},
        {    76'038'602,    -89'688'904, 0},
        {    50'294'214,    -65'802'481, 1},
        {    83'436'075,     44'248'708, 1},
        {    54'031'677,     92'370'464, 1},
        {    -6'019'575,     -1'302'029, 1},
        {    86'952'873,    -75'470'243, 1},
        {   -53'215'372,     28'947'490, 0},
        {   -37'109'442,     75'623'090, 0},
        {   -11'656'183,     16'147'085, 1},
        {    86'439'843,    -12'134'914, 1},
        {   -52'977'427,     48'349'835, 1},
        {    16'234'161,     26'103'566, 1},
        {    73'756'826,     -6'586'797, 1},
        {     6'836'355,     11'529'043, 1},
        {    29'864'126,    -80'782'077, 1},
        { 1'646'787'325,  1'961'513'442, 1},
        {-1'755'035'190, -1'801'169'490, 0},
        {-1'509'018'194,  1'829'751'775, 1},
        {  -720'160'017, -1'425'309'680, 1},
        { 1'216'287'038,  1'821'933'798, 0},
        {-1'925'479'607, -1'842'455'762, 1},
        {  -795'996'486, -1'859'155'567, 1},
        {  -367'280'505,    321'267'794, 1},
        {   829'304'526, -1'575'808'585, 1},
        { 1'457'917'042,  1'083'382'210, 0},
        {  -377'130'535,  1'526'538'188, 1},
        {-1'109'347'700, -1'819'333'109, 1},
        {-1'740'794'578,    278'770'346, 0},
        {   448'156'480, -1'008'775'746, 0},
        {   442'691'160,  1'680'572'092, 0},
        { 1'241'208'470,   -647'438'045, 0},
        { 2'147'483'647,   -561'158'902, 1},
        {   761'395'308, -2'147'483'647, 1},
    };

    for (size_t i = 0, size = *(&sample + 1) - sample; i < size; i++) {
        if (sample[i][2] == 0) {
            if (Coprimality::reduceToBinaryGCD(sample[i][0], sample[i][1])) {
                return false;
            }
        } else {
            if (!Coprimality::reduceToBinaryGCD(sample[i][0], sample[i][1])) {
                return false;
            }
        }
    }

    for (size_t i = 0, size = *(&sample + 1) - sample; i < size; i++) {
        if (sample[i][2] == 0) {
            if (Coprimality::reduceToEuclidean(sample[i][0], sample[i][1])) {
                return false;
            }
        } else {
            if (!Coprimality::reduceToEuclidean(sample[i][0], sample[i][1])) {
                return false;
            }
        }
    }

    return true;
}

int main() {
    TestRunner::parseTest(testCoprimality());
}

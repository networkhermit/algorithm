#include <fun/vac/algorithms/number_theory/Parity.hpp>
#include <fun/vac/util/TestRunner.hpp>

using namespace std;

bool testParity() {
    long mapping[][2] = {
        {             0, 0},
        {             1, 1},
        {            -1, 1},
        {            60, 0},
        {            62, 0},
        {            42, 0},
        {           -87, 1},
        {           -98, 0},
        {           -56, 0},
        {            41, 1},
        {            14, 0},
        {            20, 0},
        {           -63, 1},
        {           -81, 1},
        {           -39, 1},
        {            33, 1},
        {           -32, 0},
        {           -50, 0},
        {         -1471, 1},
        {          4046, 0},
        {          5019, 1},
        {          4521, 1},
        {         -8744, 0},
        {          4787, 1},
        {          4973, 1},
        {         -1184, 0},
        {         -4437, 1},
        {         -5871, 1},
        {         -4298, 0},
        {         -2027, 1},
        {         -2796, 0},
        {         -2209, 1},
        {         -6094, 0},
        {          3257, 1},
        {         -4732, 0},
        {          7495, 1},
        {         -3916, 0},
        {          1469, 1},
        {          6164, 0},
        {         -7545, 1},
        {         -7763, 1},
        {          7523, 1},
        {         -8076, 0},
        {         -3778, 0},
        {         -1648, 0},
        {          4220, 0},
        {         -8551, 1},
        {          9692, 0},
        {          5394, 0},
        {          2472, 0},
        {          4056, 0},
        {          5769, 1},
        {         -2322, 0},
        {           503, 1},
        {         -8721, 1},
        {         -6344, 0},
        {         -4335, 1},
        {          1677, 1},
        {         -1703, 1},
        {         -4086, 0},
        {          7076, 0},
        {         -7165, 1},
        {          7636, 0},
        {         -8043, 1},
        {         -3753, 1},
        {          4007, 1},
        {          -261, 1},
        {         -6538, 0},
        {          9766, 0},
        {         -7563, 1},
        {         -7944, 0},
        {          8922, 0},
        {         -5759, 1},
        {         -8791, 1},
        {         -2211, 1},
        {          3493, 1},
        {          5573, 1},
        {         -2645, 1},
        {       -603656, 0},
        {        807727, 1},
        {        -69847, 1},
        {       -843676, 0},
        {       -830961, 1},
        {       -608772, 0},
        {        931043, 1},
        {        855512, 0},
        {        358482, 0},
        {        -98919, 1},
        {        215211, 1},
        {       -933334, 0},
        {       -613634, 0},
        {        -95643, 1},
        {         53934, 0},
        {        161818, 0},
        {    67'041'621, 1},
        {    99'662'694, 0},
        {   -94'392'019, 1},
        {   -20'543'495, 1},
        {   -27'591'794, 0},
        {    -8'314'396, 0},
        {    97'455'764, 0},
        {    59'367'920, 0},
        {    26'856'309, 1},
        {    64'178'815, 1},
        {   -11'480'741, 1},
        {    45'428'276, 0},
        {    46'193'175, 1},
        {   -31'079'636, 0},
        {    63'115'980, 0},
        {    42'559'270, 0},
        {-1'645'871'504, 0},
        {-1'233'918'598, 0},
        {   722'012'346, 0},
        {-1'525'999'934, 0},
        {  -365'543'955, 1},
        { 2'008'798'151, 1},
        {-1'300'713'468, 0},
        { 1'425'587'979, 1},
        { 1'324'445'673, 1},
        { 2'136'612'365, 1},
        {  -995'371'213, 1},
        {-2'048'365'905, 1},
        { 2'096'138'065, 1},
        {  -768'738'192, 0},
        {  -846'034'014, 0},
        {   411'817'058, 0},
        { 2'147'483'647, 1},
        {-2'147'483'648, 0},
    };

    size_t instances = sizeof(mapping) / sizeof(mapping[0]);

    for (size_t i = 0; i < instances; i++) {
        if (mapping[i][1] == 0) {
            if (!Parity::moduloIsEven(mapping[i][0])) {
                return false;
            }
        } else {
            if (Parity::moduloIsEven(mapping[i][0])) {
                return false;
            }
        }
    }

    for (size_t i = 0; i < instances; i++) {
        if (mapping[i][1] == 0) {
            if (!Parity::bitwiseIsEven(mapping[i][0])) {
                return false;
            }
        } else {
            if (Parity::bitwiseIsEven(mapping[i][0])) {
                return false;
            }
        }
    }

    for (size_t i = 0; i < instances; i++) {
        if (mapping[i][1] == 0) {
            if (Parity::moduloIsOdd(mapping[i][0])) {
                return false;
            }
        } else {
            if (!Parity::moduloIsOdd(mapping[i][0])) {
                return false;
            }
        }
    }

    for (size_t i = 0; i < instances; i++) {
        if (mapping[i][1] == 0) {
            if (Parity::bitwiseIsOdd(mapping[i][0])) {
                return false;
            }
        } else {
            if (!Parity::bitwiseIsOdd(mapping[i][0])) {
                return false;
            }
        }
    }

    return true;
}

int main() {
    TestRunner::parseTest(testParity());
}

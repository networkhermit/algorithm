package tests

import (
	"testing"

	"muse/algorithms/number_theory/tests"
)

type Category byte

const (
	Composite Category = iota
	None
	Prime
)

var sample = []tests.UniqueCategorySample[int64, Category]{
	{N: 0, Category: None},
	{N: 1, Category: None},
	{N: 2, Category: Prime},
	{N: 3, Category: Prime},
	{N: 4, Category: Composite},
	{N: 5, Category: Prime},
	{N: 6, Category: Composite},
	{N: 7, Category: Prime},
	{N: 8, Category: Composite},
	{N: 9, Category: Composite},
	{N: 10, Category: Composite},
	{N: 11, Category: Prime},
	{N: 12, Category: Composite},
	{N: 13, Category: Prime},
	{N: 14, Category: Composite},
	{N: 15, Category: Composite},
	{N: 16, Category: Composite},
	{N: 17, Category: Prime},
	{N: 18, Category: Composite},
	{N: 19, Category: Prime},
	{N: 20, Category: Composite},
	{N: 21, Category: Composite},
	{N: 22, Category: Composite},
	{N: 23, Category: Prime},
	{N: 24, Category: Composite},
	{N: 25, Category: Composite},
	{N: 26, Category: Composite},
	{N: 27, Category: Composite},
	{N: 28, Category: Composite},
	{N: 29, Category: Prime},
	{N: 30, Category: Composite},
	{N: 31, Category: Prime},
	{N: 32, Category: Composite},
	{N: 33, Category: Composite},
	{N: 34, Category: Composite},
	{N: 35, Category: Composite},
	{N: 36, Category: Composite},
	{N: 37, Category: Prime},
	{N: 38, Category: Composite},
	{N: 39, Category: Composite},
	{N: 40, Category: Composite},
	{N: 41, Category: Prime},
	{N: 42, Category: Composite},
	{N: 43, Category: Prime},
	{N: 44, Category: Composite},
	{N: 45, Category: Composite},
	{N: 46, Category: Composite},
	{N: 47, Category: Prime},
	{N: 48, Category: Composite},
	{N: 49, Category: Composite},
	{N: 50, Category: Composite},
	{N: 51, Category: Composite},
	{N: 52, Category: Composite},
	{N: 53, Category: Prime},
	{N: 54, Category: Composite},
	{N: 55, Category: Composite},
	{N: 56, Category: Composite},
	{N: 57, Category: Composite},
	{N: 58, Category: Composite},
	{N: 59, Category: Prime},
	{N: 60, Category: Composite},
	{N: 61, Category: Prime},
	{N: 62, Category: Composite},
	{N: 63, Category: Composite},
	{N: 64, Category: Composite},
	{N: 65, Category: Composite},
	{N: 66, Category: Composite},
	{N: 67, Category: Prime},
	{N: 68, Category: Composite},
	{N: 69, Category: Composite},
	{N: 70, Category: Composite},
	{N: 71, Category: Prime},
	{N: 72, Category: Composite},
	{N: 73, Category: Prime},
	{N: 74, Category: Composite},
	{N: 75, Category: Composite},
	{N: 76, Category: Composite},
	{N: 77, Category: Composite},
	{N: 78, Category: Composite},
	{N: 79, Category: Prime},
	{N: 80, Category: Composite},
	{N: 81, Category: Composite},
	{N: 82, Category: Composite},
	{N: 83, Category: Prime},
	{N: 84, Category: Composite},
	{N: 85, Category: Composite},
	{N: 86, Category: Composite},
	{N: 87, Category: Composite},
	{N: 88, Category: Composite},
	{N: 89, Category: Prime},
	{N: 90, Category: Composite},
	{N: 91, Category: Composite},
	{N: 92, Category: Composite},
	{N: 93, Category: Composite},
	{N: 94, Category: Composite},
	{N: 95, Category: Composite},
	{N: 96, Category: Composite},
	{N: 97, Category: Prime},
	{N: 98, Category: Composite},
	{N: 99, Category: Composite},
	{N: 100, Category: Composite},
	{N: 101, Category: Prime},
	{N: 102, Category: Composite},
	{N: 103, Category: Prime},
	{N: 104, Category: Composite},
	{N: 105, Category: Composite},
	{N: 106, Category: Composite},
	{N: 107, Category: Prime},
	{N: 108, Category: Composite},
	{N: 109, Category: Prime},
	{N: 110, Category: Composite},
	{N: 111, Category: Composite},
	{N: 112, Category: Composite},
	{N: 113, Category: Prime},
	{N: 114, Category: Composite},
	{N: 115, Category: Composite},
	{N: 116, Category: Composite},
	{N: 117, Category: Composite},
	{N: 118, Category: Composite},
	{N: 119, Category: Composite},
	{N: 120, Category: Composite},
	{N: 121, Category: Composite},
	{N: 122, Category: Composite},
	{N: 123, Category: Composite},
	{N: 124, Category: Composite},
	{N: 125, Category: Composite},
	{N: 126, Category: Composite},
	{N: 127, Category: Prime},
	{N: 170, Category: Composite},
	{N: 271, Category: Prime},
	{N: 357, Category: Composite},
	{N: 225, Category: Composite},
	{N: 440, Category: Composite},
	{N: 235, Category: Composite},
	{N: 274, Category: Composite},
	{N: 383, Category: Prime},
	{N: 313, Category: Prime},
	{N: 434, Category: Composite},
	{N: 222, Category: Composite},
	{N: 137, Category: Prime},
	{N: 155, Category: Composite},
	{N: 465, Category: Composite},
	{N: 249, Category: Composite},
	{N: 141, Category: Composite},
	{N: 5307, Category: Composite},
	{N: 6374, Category: Composite},
	{N: 951, Category: Composite},
	{N: 7236, Category: Composite},
	{N: 2027, Category: Prime},
	{N: 2382, Category: Composite},
	{N: 2251, Category: Prime},
	{N: 757, Category: Prime},
	{N: 6678, Category: Composite},
	{N: 3206, Category: Composite},
	{N: 6257, Category: Prime},
	{N: 615, Category: Composite},
	{N: 1677, Category: Composite},
	{N: 2086, Category: Composite},
	{N: 4158, Category: Composite},
	{N: 4723, Category: Prime},
	{N: 7755, Category: Composite},
	{N: 1583, Category: Prime},
	{N: 6547, Category: Prime},
	{N: 4219, Category: Prime},
	{N: 660, Category: Composite},
	{N: 7698, Category: Composite},
	{N: 3121, Category: Prime},
	{N: 3881, Category: Prime},
	{N: 2541, Category: Composite},
	{N: 4696, Category: Composite},
	{N: 4091, Category: Prime},
	{N: 5222, Category: Composite},
	{N: 4021, Category: Prime},
	{N: 5839, Category: Prime},
	{N: 6048, Category: Composite},
	{N: 5521, Category: Prime},
	{N: 47908, Category: Composite},
	{N: 35060, Category: Composite},
	{N: 47361, Category: Composite},
	{N: 48859, Category: Prime},
	{N: 56067, Category: Composite},
	{N: 70451, Category: Prime},
	{N: 9735, Category: Composite},
	{N: 19763, Category: Prime},
	{N: 97943, Category: Prime},
	{N: 9933, Category: Composite},
	{N: 61651, Category: Prime},
	{N: 11407, Category: Composite},
	{N: 8774, Category: Composite},
	{N: 48383, Category: Prime},
	{N: 51001, Category: Prime},
	{N: 73029, Category: Composite},
	{N: 27690, Category: Composite},
	{N: 30466, Category: Composite},
	{N: 71479, Category: Prime},
	{N: 84701, Category: Prime},
	{N: 28643, Category: Prime},
	{N: 57075, Category: Composite},
	{N: 99745, Category: Composite},
	{N: 100921, Category: Composite},
	{N: 40496, Category: Composite},
	{N: 9798, Category: Composite},
	{N: 41603, Category: Prime},
	{N: 46912, Category: Composite},
	{N: 49852, Category: Composite},
	{N: 55871, Category: Prime},
	{N: 10993, Category: Prime},
	{N: 79657, Category: Prime},
	{N: 609680, Category: Composite},
	{N: 180540, Category: Composite},
	{N: 147672, Category: Composite},
	{N: 819031, Category: Prime},
	{N: 149623, Category: Prime},
	{N: 1056048, Category: Composite},
	{N: 483389, Category: Prime},
	{N: 452831, Category: Prime},
	{N: 415109, Category: Prime},
	{N: 185021, Category: Prime},
	{N: 715823, Category: Prime},
	{N: 744081, Category: Composite},
	{N: 1276157, Category: Prime},
	{N: 192978, Category: Composite},
	{N: 631537, Category: Prime},
	{N: 554226, Category: Composite},
	{N: 653111, Category: Prime},
	{N: 607346, Category: Composite},
	{N: 452539, Category: Prime},
	{N: 815939, Category: Prime},
	{N: 247199, Category: Composite},
	{N: 1245953, Category: Prime},
	{N: 974803, Category: Prime},
	{N: 185813, Category: Prime},
	{N: 1261831, Category: Prime},
	{N: 443227, Category: Prime},
	{N: 1057294, Category: Composite},
	{N: 427241, Category: Prime},
	{N: 627391, Category: Prime},
	{N: 1019663, Category: Prime},
	{N: 629142, Category: Composite},
	{N: 164503, Category: Prime},
	{N: 6006421, Category: Prime},
	{N: 9499199, Category: Prime},
	{N: 12598247, Category: Prime},
	{N: 13919909, Category: Prime},
	{N: 8975950, Category: Composite},
	{N: 6655578, Category: Composite},
	{N: 2388697, Category: Prime},
	{N: 14018237, Category: Composite},
	{N: 7871261, Category: Prime},
	{N: 1678013, Category: Prime},
	{N: 2654027, Category: Prime},
	{N: 10142801, Category: Prime},
	{N: 2291487, Category: Composite},
	{N: 3893849, Category: Prime},
	{N: 1308913, Category: Composite},
	{N: 14162880, Category: Composite},
}

var Derive = func(fn func(int64) bool, c Category) func(t *testing.T) {
	return tests.UniqueCategoryDerive(fn, sample, c)
}

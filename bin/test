#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

trap 'echo ✗ fatal error: errexit trapped with status $? 1>&2' ERR

ROOT=${PWD}

while (( $# > 0 )); do
    case "${1}" in
        --root)
            ROOT=${2?✗ argument parsing failed: missing parameter for argument ‘${1}’}
            shift 2
            ;;
        -h | --help)
            cat << EOF
Usage:
    ${0##*/} [OPTION]... SPEC

Optional arguments:
    --root DIRECTORY
        starting point (default: env#PWD)
    -h, --help
        show this help message and exit
    -v, --version
        output version information and exit

Positional arguments:
    SPEC
        runtime spec
EOF
            shift
            exit
            ;;
        -v | --version)
            echo v0.1.0
            shift
            exit
            ;;
        --)
            shift
            break
            ;;
        *)
            break
            ;;
    esac
done

SPEC=${1?✗ argument parsing failed: missing positional argument ‘SPEC’}
shift

if (( $# > 0 )); then
    echo "✗ argument parsing failed: unrecognizable argument ‘${1}’" 1>&2
    exit 1
fi

if [ ! -d "${ROOT}" ]; then
    echo "✗ not a directory: ‘${ROOT}’" 1>&2
    exit 1
elif [ ! -r "${ROOT}" ]; then
    echo "✗ read permission not granted: ‘${ROOT}’" 1>&2
    exit 1
fi

testingPhaseOfC () {
    echo '---------------------------[ C ]--------------------------------'

    for instance in $(find -L "${ROOT}" -type f -name "*.c" | sort); do
        fname=$(basename "${instance}" .c)

        if gcc   -O0 -g3 -Wall -Werror -std=c11 -x c -o "${fname}" "${instance}" -lm; then
            ./"${fname}"
            rm -f "${fname}"
        fi

        if clang -O0 -g3 -Wall -Werror -std=c11 -x c -o "${fname}" "${instance}" -lm; then
            ./"${fname}"
            rm -f "${fname}"
        fi

        echo -e "\\t\\t---------------------------    [${fname}]"
    done
}

testingPhaseOfCPP () {
    echo '---------------------------[ C++ ]------------------------------'

    for instance in $(find -L "${ROOT}" -type f -name "*.cpp" | sort); do
        fname=$(basename "${instance}" .cpp)

        if g++     -O0 -g3 -Wall -Werror -std=c++14 -x c++ -o "${fname}" "${instance}"; then
            ./"${fname}"
            rm -f "${fname}"
        fi

        if clang++ -O0 -g3 -Wall -Werror -std=c++14 -x c++ -o "${fname}" "${instance}"; then
            ./"${fname}"
            rm -f "${fname}"
        fi

        echo -e "\\t\\t---------------------------    [${fname}]"
    done
}

testingPhaseOfGo () {
    echo '---------------------------[ Go ]-------------------------------'

    for instance in $(find -L "${ROOT}" -type f -name "*.go" | sort); do
        fname=$(basename "${instance}" .go)

        if go run "${instance}"; then
            go clean -cache
        fi

        echo -e "\\t\\t---------------------------    [${fname}]"
    done
}

testingPhaseOfJava () {
    echo '---------------------------[ Java ]-----------------------------'

    for instance in $(find -L "${ROOT}" -type f -name "*.java" | sort); do
        fname=$(basename "${instance}" .java)

        if javac -d local_build -g -deprecation -Werror -Xlint:all,-path "${instance}"; then
            java -cp local_build -ea "${fname}"
            rm -rf local_build
        fi

        echo -e "\\t\\t---------------------------    [${fname}]"
    done
}

testingPhaseOfLisp () {
    echo '---------------------------[ Lisp ]-----------------------------'

    for instance in $(find -L "${ROOT}" -type f -name "*.lisp" | sort); do
        fname=$(basename "${instance}" .lisp)

        sbcl --noinform --non-interactive --no-sysinit --userinit ~/.fun/minimal.lisp \
            --load "${instance}" --eval "(when (fboundp 'main) (main))"

        echo -e "\\t\\t---------------------------    [${fname}]"
    done
}

testingPhaseOfNodeJS () {
    echo '---------------------------[ NodeJS ]---------------------------'

    for instance in $(find -L "${ROOT}" -type f -name "*.js" | sort); do
        fname=$(basename "${instance}" .js)

        node --throw-deprecation --trace-warnings "${instance}"

        echo -e "\\t\\t---------------------------    [${fname}]"
    done
}

testingPhaseOfPHP () {
    echo '---------------------------[ PHP ]------------------------------'

    for instance in $(find -L "${ROOT}" -type f -name "*.php" | sort); do
        fname=$(basename "${instance}" .php)

        php -e "${instance}"

        echo -e "\\t\\t---------------------------    [${fname}]"
    done
}

testingPhaseOfPython () {
    echo '---------------------------[ Python ]---------------------------'

    for instance in $(find -L "${ROOT}" -type f -name "*.py" | sort); do
        fname=$(basename "${instance}" .py)

        python3 -d -W:all -B "${instance}"

        echo -e "\\t\\t---------------------------    [${fname}]"
    done
}

testingPhaseOfRuby () {
    echo '---------------------------[ Ruby ]-----------------------------'

    for instance in $(find -L "${ROOT}" -type f -name "*.rb" | sort); do
        fname=$(basename "${instance}" .rb)

        ruby -w "${instance}"

        echo -e "\\t\\t---------------------------    [${fname}]"
    done
}

echo '=============== TESTING AUTOMATION -- [STARTED] ================'

case "${SPEC}" in
    all)
        testingPhaseOfC
        testingPhaseOfCPP
        testingPhaseOfGo
        testingPhaseOfJava
        testingPhaseOfLisp
        testingPhaseOfNodeJS
        testingPhaseOfPHP
        testingPhaseOfPython
        testingPhaseOfRuby
        ;;
    c)
        testingPhaseOfC
        ;;
    c++)
        testingPhaseOfCPP
        ;;
    go)
        testingPhaseOfGo
        ;;
    java)
        testingPhaseOfJava
        ;;
    lisp)
        testingPhaseOfLisp
        ;;
    node)
        testingPhaseOfNodeJS
        ;;
    php)
        testingPhaseOfPHP
        ;;
    python)
        testingPhaseOfPython
        ;;
    ruby)
        testingPhaseOfRuby
        ;;
    perf)
        time testingPhaseOfC
        time testingPhaseOfCPP
        time testingPhaseOfGo
        time testingPhaseOfJava
        time testingPhaseOfLisp
        time testingPhaseOfNodeJS
        time testingPhaseOfPHP
        time testingPhaseOfPython
        time testingPhaseOfRuby
        ;;
    *)
        echo "✗ unknown spec: ‘${SPEC}’" 1>&2
        exit 1
        ;;
esac

echo '=============== TESTING AUTOMATION -- [FINISHED] ==============='

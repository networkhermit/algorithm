#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

trap 'echo ✗ fatal error: errexit trapped with status $? 1>&2' ERR

ROOT=${PWD}

readonly -A lang=( \
    [c]=C \
    [c++]=C++ \
    [go]=Go \
    [java]=Java \
    [lisp]=Lisp \
    [nodejs]=NodeJS \
    [php]=PHP \
    [python]=Python \
    [ruby]=Ruby \
)

while (( $# > 0 )); do
    case "${1}" in
    --root)
        ROOT=${2?✗ argument parsing failed: missing parameter for argument ‘${1}’}
        shift 2
        ;;
    -h | --help)
        cat << EOF
Usage:
    ${0##*/} [OPTION]... SPEC

Optional arguments:
    --root DIRECTORY
        starting point (default: env#PWD)
    -h, --help
        show this help message and exit
    -v, --version
        output version information and exit

Positional arguments:
    SPEC (all | perf | c | c++ | go | java | lisp | nodejs | php | python | ruby)
        runtime spec
EOF
        shift
        exit
        ;;
    -v | --version)
        echo v0.1.0
        shift
        exit
        ;;
    --)
        shift
        break
        ;;
    *)
        break
        ;;
    esac
done

: "${1?✗ argument parsing failed: missing positional argument ‘SPEC’}"
case "${1}" in
all | perf | c | c++ | go | java | lisp | nodejs | php | python | ruby)
    SPEC=${1}
    ;;
*)
    echo "✗ argument parsing failed: acceptable values for ‘SPEC’ are all | perf | c | c++ | go | java | lisp | nodejs | php | python | ruby" 1>&2
    exit 1
    ;;
esac
shift

if (( $# > 0 )); then
    echo "✗ argument parsing failed: unrecognizable argument ‘${1}’" 1>&2
    exit 1
fi

if [ ! -d "${ROOT}" ]; then
    echo "✗ not a directory: ‘${ROOT}’" 1>&2
    exit 1
elif [ ! -r "${ROOT}" ]; then
    echo "✗ read permission not granted: ‘${ROOT}’" 1>&2
    exit 1
fi

readonly prefix=---------------------------
readonly suffix=---------------------------------

run_test () {
    local instance
    local fname
    case "${1}" in
    c)
        echo "${prefix}[ ${lang[${1}]} ]${suffix:${#lang[${1}]}}"

        for instance in $(find -L "${ROOT}" -type f -name "*.c" | sort); do
            fname=$(basename "${instance}" .c)

            if gcc   -O0 -g3 -Wall -Werror -std=c18 -x c -o "${fname}" "${instance}" -lm; then
                ./"${fname}"
                rm -f "${fname}"
            fi

            if clang -O0 -g3 -Wall -Werror -std=c18 -x c -o "${fname}" "${instance}" -lm; then
                ./"${fname}"
                rm -f "${fname}"
            fi

            printf '\t\t%s    [%s]\n' "${prefix}" "${fname}"
        done
        ;;
    c++)
        echo "${prefix}[ ${lang[${1}]} ]${suffix:${#lang[${1}]}}"

        for instance in $(find -L "${ROOT}" -type f -name "*.cpp" | sort); do
            fname=$(basename "${instance}" .cpp)

            if g++     -O0 -g3 -Wall -Werror -std=c++17 -x c++ -o "${fname}" "${instance}"; then
                ./"${fname}"
                rm -f "${fname}"
            fi

            if clang++ -O0 -g3 -Wall -Werror -std=c++17 -x c++ -o "${fname}" "${instance}"; then
                ./"${fname}"
                rm -f "${fname}"
            fi

            printf '\t\t%s    [%s]\n' "${prefix}" "${fname}"
        done
        ;;
    go)
        echo "${prefix}[ ${lang[${1}]} ]${suffix:${#lang[${1}]}}"

        for instance in $(find -L "${ROOT}" -type f -name "*.go" | sort); do
            fname=$(basename "${instance}" .go)

            if go run "${instance}"; then
                go clean -cache
            fi

            printf '\t\t%s    [%s]\n' "${prefix}" "${fname}"
        done
        ;;
    java)
        echo "${prefix}[ ${lang[${1}]} ]${suffix:${#lang[${1}]}}"

        for instance in $(find -L "${ROOT}" -type f -name "*.java" | sort); do
            fname=$(basename "${instance}" .java)

            unset _JAVA_OPTIONS
            if javac -d local_build -g -deprecation -Werror -Xlint:all,-path "${instance}"; then
                java -cp local_build -ea "${fname}"
                rm --force --recursive local_build
            fi

            printf '\t\t%s    [%s]\n' "${prefix}" "${fname}"
        done
        ;;
    lisp)
        echo "${prefix}[ ${lang[${1}]} ]${suffix:${#lang[${1}]}}"

        for instance in $(find -L "${ROOT}" -type f -name "*.lisp" | sort); do
            fname=$(basename "${instance}" .lisp)

            sbcl --noinform --non-interactive --no-sysinit \
                --load "${instance}" --eval "(when (fboundp 'main) (main))"

            printf '\t\t%s    [%s]\n' "${prefix}" "${fname}"
        done
        ;;
    nodejs)
        echo "${prefix}[ ${lang[${1}]} ]${suffix:${#lang[${1}]}}"

        for instance in $(find -L "${ROOT}" -type f -name "*.js" | sort); do
            fname=$(basename "${instance}" .js)

            node --throw-deprecation --trace-warnings "${instance}"

            printf '\t\t%s    [%s]\n' "${prefix}" "${fname}"
        done
        ;;
    php)
        echo "${prefix}[ ${lang[${1}]} ]${suffix:${#lang[${1}]}}"

        for instance in $(find -L "${ROOT}" -type f -name "*.php" | sort); do
            fname=$(basename "${instance}" .php)

            php -e "${instance}"

            printf '\t\t%s    [%s]\n' "${prefix}" "${fname}"
        done
        ;;
    python)
        echo "${prefix}[ ${lang[${1}]} ]${suffix:${#lang[${1}]}}"

        for instance in $(find -L "${ROOT}" -type f -name "*.py" | sort); do
            fname=$(basename "${instance}" .py)

            python3 -d -W:all -B "${instance}"

            printf '\t\t%s    [%s]\n' "${prefix}" "${fname}"
        done
        ;;
    ruby)
        echo "${prefix}[ ${lang[${1}]} ]${suffix:${#lang[${1}]}}"

        for instance in $(find -L "${ROOT}" -type f -name "*.rb" | sort); do
            fname=$(basename "${instance}" .rb)

            ruby -w "${instance}"

            printf '\t\t%s    [%s]\n' "${prefix}" "${fname}"
        done
        ;;
    *)
        return 1
        ;;
    esac
}

echo '===================== test session starts ======================'

case "${SPEC}" in
all)
    for k in "${!lang[@]}"; do
        run_test "${k}"
    done
    ;;
perf)
    for k in "${!lang[@]}"; do
        time run_test "${k}"
    done
    ;;
*)
    run_test "${SPEC}"
    ;;
esac

echo '==================== test session finished ====================='

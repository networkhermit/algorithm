#!/usr/bin/env bash

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

warn () {
    if (( $# > 0 )); then
        echo "${@}" 1>&2
    fi
}

die () {
    warn "${@}"
    exit 1
}

notify () {
    local code=$?
    warn "✗ [FATAL] $(caller): ${BASH_COMMAND} (${code})"
}

trap notify ERR

display_help () {
    cat << EOF
Synopsis:
    ${0##*/} [OPTION]... SPEC

Options:
    --root DIRECTORY
        starting point (default: env#PWD)
    -h, --help
        show this help message and exit
    -v, --version
        output version information and exit

Arguments:
    SPEC (all | perf | go | python) (default: ${SPEC})
        runtime spec
EOF
}

ROOT=${PWD}

readonly -A lang=( \
    [go]=Go \
    [python]=Python \
)

SPEC=perf

# shellcheck source=/dev/null
source "$(dirname "$(realpath "${0}")")/.env"

while (( $# > 0 )); do
    case ${1} in
    --root)
        ROOT=${2?✗ option parsing failed: missing value for argument ‘${1}’}
        shift 2
        ;;
    -h | --help)
        display_help
        shift
        exit
        ;;
    -v | --version)
        echo v0.1.0
        shift
        exit
        ;;
    --)
        shift
        break
        ;;
    *)
        break
        ;;
    esac
done

if (( $# > 0 )); then
    case ${1} in
    all | perf | go | python)
        SPEC=${1}
        ;;
    *)
        die "✗ argument parsing failed: acceptable values for ‘SPEC’ are all | perf | go | python"
        ;;
    esac
    shift
fi

if (( $# > 0 )); then
    die "✗ argument parsing failed: unrecognizable argument ‘${1}’"
fi

clean_up () {
    true
}

trap clean_up EXIT

if [[ ! -d "${ROOT}" ]]; then
    die "✗ not a directory: ‘${ROOT}’"
elif [[ ! -r "${ROOT}" ]]; then
    die "✗ read permission not granted: ‘${ROOT}’"
fi

readonly prefix=---------------------------
readonly suffix=---------------------------------

run_test () {
    local instance
    local fname
    case ${1} in
    go)
        echo "${prefix}[ ${lang[${1}]} ]${suffix:${#lang[${1}]}}"

        for instance in $(find -L "${ROOT}" -type f -name '*_test.go' | sort); do
            fname=$(basename "${instance}" .go)

            pushd "$(dirname "$(readlink --canonicalize-existing "${instance}")")" &> /dev/null
            if go test -v; then
                go clean -cache
            fi
            popd &> /dev/null

            printf '\t\t%s    [%s]\n' "${prefix}" "${fname}"
        done
        ;;
    python)
        echo "${prefix}[ ${lang[${1}]} ]${suffix:${#lang[${1}]}}"

        for instance in $(find -L "${ROOT}" -type f -name '*_test.py' | sort); do
            fname=$(basename "${instance}" .py)

            python3 -d -W:all -B "${instance}"

            printf '\t\t%s    [%s]\n' "${prefix}" "${fname}"
        done
        ;;
    *)
        return 1
        ;;
    esac
}

echo ===================== test session starts ======================

case ${SPEC} in
all)
    for k in "${!lang[@]}"; do
        run_test "${k}"
    done
    ;;
perf)
    for k in "${!lang[@]}"; do
        time run_test "${k}"
    done
    ;;
*)
    run_test "${SPEC}"
    ;;
esac

echo ==================== test session finished =====================

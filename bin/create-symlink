#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

trap 'echo ✗ fatal error: errexit trapped with status $? 1>&2' ERR

while (( $# > 0 )); do
    case ${1} in
    --library-path)
        PLT_LIB_PATH=${2?✗ argument parsing failed: missing parameter for argument ‘${1}’}
        shift 2
        ;;
    -h | --help)
        cat << EOF
Usage:
    ${0##*/} [OPTION]...

Optional arguments:
    --library-path DIRECTORY
        use the specified library path (default: env#PLT_LIB_PATH)
    -h, --help
        show this help message and exit
    -v, --version
        output version information and exit
EOF
        shift
        exit
        ;;
    -v | --version)
        echo v0.1.0
        shift
        exit
        ;;
    --)
        shift
        break
        ;;
    *)
        break
        ;;
    esac
done

if (( $# > 0 )); then
    echo "✗ argument parsing failed: unrecognizable argument ‘${1}’" 1>&2
    exit 1
fi

: "${PLT_LIB_PATH?✗ unexpected error: please specify the library path using environment variable ‘PLT_LIB_PATH’ or the ‘--library-path’ option}"

if [ ! -d "${PLT_LIB_PATH}" ]; then
    echo "✗ not a directory: ‘${PLT_LIB_PATH}’" 1>&2
    exit 1
elif [ ! -r "${PLT_LIB_PATH}" ]; then
    echo "✗ read permission not granted: ‘${PLT_LIB_PATH}’" 1>&2
    exit 1
fi

ROOT=$(git rev-parse --show-toplevel)

for i in "${ROOT}"/symlink/Algorithms/*/* "${ROOT}"/symlink/DataStructures/*; do
    pushd "${i}"
    rm --force --recursive Implementation Test
    mkdir --parents Implementation Test
    find -L "${PLT_LIB_PATH}" -type f -name "$(basename "${PWD}").*" -exec ln --symbolic --verbose {} Implementation/ \;
    find -L "${PLT_LIB_PATH}" -type f -name "$(basename "${PWD}")Test.*" -exec ln --symbolic --verbose {} Test/ \;
    popd
done

#!/bin/bash

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

warn () {
    if (( $# > 0 )); then
        echo "${@}" 1>&2
    fi
}

die () {
    warn "${@}"
    exit 1
}

notify () {
    local code=$?
    warn "✗ [FATAL] $(caller): ${BASH_COMMAND} (${code})"
}

trap notify ERR

display_help () {
    cat << EOF
Synopsis:
    ${0##*/} [OPTION]...

Options:
    --library-path DIRECTORY
        use the specified library path (default: env#PLT_LIB_PATH)
    -h, --help
        show this help message and exit
    -v, --version
        output version information and exit
EOF
}

while (( $# > 0 )); do
    case ${1} in
    --library-path)
        PLT_LIB_PATH=${2?✗ option parsing failed: missing value for argument ‘${1}’}
        shift 2
        ;;
    -h | --help)
        display_help
        shift
        exit
        ;;
    -v | --version)
        echo v0.1.0
        shift
        exit
        ;;
    --)
        shift
        break
        ;;
    *)
        break
        ;;
    esac
done

if (( $# > 0 )); then
    die "✗ argument parsing failed: unrecognizable argument ‘${1}’"
fi

clean_up () {
    true
}

trap clean_up EXIT

: "${PLT_LIB_PATH?✗ unexpected error: please specify the library path using environment variable ‘PLT_LIB_PATH’ or the ‘--library-path’ option}"

if [ ! -d "${PLT_LIB_PATH}" ]; then
    die "✗ not a directory: ‘${PLT_LIB_PATH}’"
elif [ ! -r "${PLT_LIB_PATH}" ]; then
    die "✗ read permission not granted: ‘${PLT_LIB_PATH}’"
fi

ROOT=$(git -C "$(dirname "$(realpath "${0}")")" rev-parse --show-toplevel)

for i in "${ROOT}"/symlink/Algorithms/*/* "${ROOT}"/symlink/DataStructures/*; do
    pushd "${i}"
    rm --force --recursive Implementation Test
    mkdir --parents Implementation Test
    find -L "${PLT_LIB_PATH}" -type f -name "$(basename "${PWD}").*" -exec ln --symbolic --verbose {} Implementation/ \;
    find -L "${PLT_LIB_PATH}" -type f -name "$(basename "${PWD}")Test.*" -exec ln --symbolic --verbose {} Test/ \;
    popd
done

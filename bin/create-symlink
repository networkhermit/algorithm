#!/usr/bin/env bash

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

warn () {
    if (( $# > 0 )); then
        echo "${@}" 1>&2
    fi
}

die () {
    warn "${@}"
    exit 1
}

notify () {
    local code=$?
    warn "✗ [FATAL] $(caller): ${BASH_COMMAND} (${code})"
}

trap notify ERR

display_help () {
    cat << EOF
Synopsis:
    ${0##*/} [OPTION]...

Options:
    --library-path DIRECTORY
        use the specified library path (default: env#PLT_PATH)
    -h, --help
        show this help message and exit
    -v, --version
        output version information and exit
EOF
}

# shellcheck source=/dev/null
source "$(dirname "$(realpath "${0}")")/.env"

while (( $# > 0 )); do
    case ${1} in
    --library-path)
        PLT_PATH=${2?✗ option parsing failed: missing value for argument ‘${1}’}
        shift 2
        ;;
    -h | --help)
        display_help
        shift
        exit
        ;;
    -v | --version)
        echo v0.1.0
        shift
        exit
        ;;
    --)
        shift
        break
        ;;
    *)
        break
        ;;
    esac
done

if (( $# > 0 )); then
    die "✗ argument parsing failed: unrecognizable argument ‘${1}’"
fi

clean_up () {
    true
}

trap clean_up EXIT

: "${PLT_PATH?✗ unexpected error: please specify the library path using environment variable ‘PLT_PATH’ or the ‘--library-path’ option}"

if [[ ! -d "${PLT_PATH}" ]]; then
    die "✗ not a directory: ‘${PLT_PATH}’"
elif [[ ! -r "${PLT_PATH}" ]]; then
    die "✗ read permission not granted: ‘${PLT_PATH}’"
fi

ROOT=$(git -C "$(dirname "$(realpath "${0}")")" rev-parse --show-toplevel)

for i in "${ROOT}/symlink/algorithms/"*/* "${ROOT}/symlink/data_structures/"* "${ROOT}/symlink/util/"*; do
    pushd "${i}" &> /dev/null
    find implementation test -mindepth 1 -delete
    impl_snake=$(basename "${PWD}")
    test_snake=${impl_snake}_test
    impl_camel=$(sed --expression 's/_\([a-z]\)/\U\1/g' --expression 's/^\([a-z]\)/\U\1/' <<< "${impl_snake}")
    test_camel=$(sed --expression 's/_\([a-z]\)/\U\1/g' --expression 's/^\([a-z]\)/\U\1/' <<< "${test_snake}")
    impl_kebab=$(sed --expression 's/_/-/g' <<< "${impl_snake}")
    test_kebab=$(sed --expression 's/_/-/g' <<< "${test_snake}")
    find "${PLT_PATH}" -type f \
        \( -name "${impl_snake}.*" -o -name "${impl_camel}.*" -o -name "${impl_kebab}.*" \) \
        -not -path "*/__pycache__/*" \
        -exec ln --relative --symbolic --verbose {} implementation/ \;
    find "${PLT_PATH}" -type f \
        \( -name "${test_snake}.*" -o -path "*/${impl_snake}/tests.rs" -o -name "${test_camel}.*" -o -name "${test_kebab}.*" \) \
        -not -path "*/__pycache__/*" \
        -exec ln --relative --symbolic --verbose {} test/ \;
    popd &> /dev/null
done

#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

trap 'echo ✗ fatal error: errexit trapped with status $? 1>&2' ERR

ROOT=${PWD}

while (( $# > 0 )); do
    case "${1}" in
        --root)
            ROOT=${2?✗ argument parsing failed: missing parameter for argument ‘${1}’}
            shift 2
            ;;
        -h | --help)
            cat << EOF
Usage:
    ${0##*/} [OPTION]... SPEC

Optional arguments:
    --root DIRECTORY
        starting point (default: env#PWD)
    -h, --help
        show this help message and exit
    -v, --version
        output version information and exit

Positional arguments:
    SPEC
        runtime spec
EOF
            shift
            exit
            ;;
        -v | --version)
            echo v0.1.0
            shift
            exit
            ;;
        --)
            shift
            break
            ;;
        *)
            break
            ;;
    esac
done

SPEC=${1?✗ argument parsing failed: missing positional argument ‘SPEC’}
shift

if (( $# > 0 )); then
    echo "✗ argument parsing failed: unrecognizable argument ‘${1}’" 1>&2
    exit 1
fi

if [ ! -d "${ROOT}" ]; then
    echo "✗ not a directory: ‘${ROOT}’" 1>&2
    exit 1
elif [ ! -r "${ROOT}" ]; then
    echo "✗ read permission not granted: ‘${ROOT}’" 1>&2
    exit 1
fi

styleCheckPhaseC () {
    echo '---------------------------[ C ]--------------------------------'

    for instance in $(find -L "${ROOT}" -type f -name "*.c" | sort); do
        fname=$(basename "${instance}" .c)

        if grep -q '\s$' "${instance}"; then
            echo '>>>> TRAILING WHITESPACE <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi

        if grep -q '(\s*)\s*{$' "${instance}"; then
            echo '>>>> MISSING PARAMETER LIST <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi
    done

    for instance in $(find -L "${ROOT}" -type f -name "*.h" | sort); do
        fname=$(basename "${instance}" .h)

        if grep -q '\s$' "${instance}"; then
            echo '>>>> TRAILING WHITESPACE <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi

        if grep -q '(\s*)\s*{$' "${instance}"; then
            echo '>>>> MISSING PARAMETER LIST <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi
    done
}

styleCheckPhaseCPP () {
    echo '---------------------------[ C++ ]------------------------------'

    for instance in $(find -L "${ROOT}" -type f -name "*.cpp" | sort); do
        fname=$(basename "${instance}" .cpp)

        if grep -q '\s$' "${instance}"; then
            echo '>>>> TRAILING WHITESPACE <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi

        if ! grep -q '\<using\s*namespace\s*std\>' "${instance}"; then
            echo '>>>> NOT USING DEFAULT NAMESPACE <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi
    done

    for instance in $(find -L "${ROOT}" -type f -name "*.hpp" | sort); do
        fname=$(basename "${instance}" .hpp)

        if grep -q '\s$' "${instance}"; then
            echo '>>>> TRAILING WHITESPACE <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi

        if grep -q '\<using\s*namespace\>' "${instance}"; then
            echo '>>>> NOT USING DEFAULT NAMESPACE <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi
    done
}

styleCheckPhaseGo () {
    echo '---------------------------[ Go ]-------------------------------'

    for instance in $(find -L "${ROOT}" -type f -name "*.go" | sort); do
        fname=$(basename "${instance}" .go)

        if grep -q '\s$' "${instance}"; then
            echo '>>>> TRAILING WHITESPACE <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi

        if grep -q ';$' "${instance}"; then
            echo '>>>> REDUNDANT SEMICOLON <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi

        if grep -q '\<if\s*(.*)\s*{$' "${instance}"; then
            echo '>>>> REDUNDANT PARENTHESIS <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi

        if grep -q '\<for\s*(.*)\s*{$' "${instance}"; then
            echo '>>>> REDUNDANT PARENTHESIS <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi
    done
}

styleCheckPhaseJava () {
    echo '---------------------------[ Java ]-----------------------------'

    for instance in $(find -L "${ROOT}" -type f -name "*.java" | sort); do
        fname=$(basename "${instance}" .java)

        if grep -q '\s$' "${instance}"; then
            echo '>>>> TRAILING WHITESPACE <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi

        if grep -q '[^[:upper:]>]>>[^>]' "${instance}"; then
            echo '>>>> NOT USING LOGICAL RIGHT SHIFT <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi
    done
}

styleCheckPhaseLisp () {
    echo '---------------------------[ Lisp ]-----------------------------'

    for instance in $(find -L "${ROOT}" -type f -name "*.lisp" | sort); do
        fname=$(basename "${instance}" .lisp)

        if grep -q '\s$' "${instance}"; then
            echo '>>>> TRAILING WHITESPACE <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi
    done
}

styleCheckPhaseNodeJS () {
    echo '---------------------------[ NodeJS ]---------------------------'

    for instance in $(find -L "${ROOT}" -type f -name "*.js" | sort); do
        fname=$(basename "${instance}" .js)

        if grep -q '\s$' "${instance}"; then
            echo '>>>> TRAILING WHITESPACE <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi

        if grep -q ';$' "${instance}"; then
            echo '>>>> REDUNDANT SEMICOLON <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi

        if grep -q '[^>]>>[^>]' "${instance}"; then
            echo '>>>> NOT USING LOGICAL RIGHT SHIFT <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi

        if grep -q '[^!=][!=]=[^=]' "${instance}"; then
            echo '>>>> NOT USING STRICT (IN)EQUALITY <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi
    done
}

styleCheckPhasePHP () {
    echo '---------------------------[ PHP ]------------------------------'

    for instance in $(find -L "${ROOT}" -type f -name "*.php" | sort); do
        fname=$(basename "${instance}" .php)

        if grep -q '\s$' "${instance}"; then
            echo '>>>> TRAILING WHITESPACE <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi
    done
}

styleCheckPhasePython () {
    echo '---------------------------[ Python ]---------------------------'

    for instance in $(find -L "${ROOT}" -type f -name "*.py" | sort); do
        fname=$(basename "${instance}" .py)

        if grep -q '\s$' "${instance}"; then
            echo '>>>> TRAILING WHITESPACE <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi

        if grep -q ';$' "${instance}"; then
            echo '>>>> REDUNDANT SEMICOLON <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi

        if grep -q '\<\(el\)\?if\s*(.*)\s*:$' "${instance}"; then
            echo '>>>> REDUNDANT PARENTHESIS <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi

        if grep -q '\<while\s*(.*)\s*:$' "${instance}"; then
            echo '>>>> REDUNDANT PARENTHESIS <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi
    done
}

styleCheckPhaseRuby () {
    echo '---------------------------[ Ruby ]-----------------------------'

    for instance in $(find -L "${ROOT}" -type f -name "*.rb" | sort); do
        fname=$(basename "${instance}" .rb)

        if grep -q '\s$' "${instance}"; then
            echo '>>>> TRAILING WHITESPACE <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi

        if grep -q ';$' "${instance}"; then
            echo '>>>> REDUNDANT SEMICOLON <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi

        if grep -q '\<\(els\)\?if\s*(.*)$' "${instance}"; then
            echo '>>>> REDUNDANT PARENTHESIS <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi

        if grep -q '\<while\s*(.*)$' "${instance}"; then
            echo '>>>> REDUNDANT PARENTHESIS <<<<'
            echo -e "\\t\\t---------------------------    [${fname}]"
        fi
    done
}

echo '================= STYLE CHECKING -- [STARTED] =================='

case "${SPEC}" in
    all)
        styleCheckPhaseC
        styleCheckPhaseCPP
        styleCheckPhaseGo
        styleCheckPhaseJava
        styleCheckPhaseLisp
        styleCheckPhaseNodeJS
        styleCheckPhasePHP
        styleCheckPhasePython
        styleCheckPhaseRuby
        ;;
    c)
        styleCheckPhaseC
        ;;
    c++)
        styleCheckPhaseCPP
        ;;
    go)
        styleCheckPhaseGo
        ;;
    java)
        styleCheckPhaseJava
        ;;
    lisp)
        styleCheckPhaseLisp
        ;;
    node)
        styleCheckPhaseNodeJS
        ;;
    php)
        styleCheckPhasePHP
        ;;
    python)
        styleCheckPhasePython
        ;;
    ruby)
        styleCheckPhaseRuby
        ;;
    perf)
        time styleCheckPhaseC
        time styleCheckPhaseCPP
        time styleCheckPhaseGo
        time styleCheckPhaseJava
        time styleCheckPhaseLisp
        time styleCheckPhaseNodeJS
        time styleCheckPhasePHP
        time styleCheckPhasePython
        time styleCheckPhaseRuby
        ;;
    *)
        echo "✗ unknown spec: ‘${SPEC}’" 1>&2
        exit 1
        ;;
esac

echo '================= STYLE CHECKING -- [FINISHED] ================='

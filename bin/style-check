#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

trap 'echo ✗ fatal error: errexit trapped with status $? 1>&2' ERR

ROOT=${PWD}

readonly -A lang=( \
    [c]=C \
    [c++]=C++ \
    [go]=Go \
    [java]=Java \
    [lisp]=Lisp \
    [nodejs]=NodeJS \
    [php]=PHP \
    [python]=Python \
    [ruby]=Ruby \
)

while (( $# > 0 )); do
    case "${1}" in
    --root)
        ROOT=${2?✗ argument parsing failed: missing parameter for argument ‘${1}’}
        shift 2
        ;;
    -h | --help)
        cat << EOF
Usage:
    ${0##*/} [OPTION]... SPEC

Optional arguments:
    --root DIRECTORY
        starting point (default: env#PWD)
    -h, --help
        show this help message and exit
    -v, --version
        output version information and exit

Positional arguments:
    SPEC (all | perf | c | c++ | go | java | lisp | nodejs | php | python | ruby)
        runtime spec
EOF
        shift
        exit
        ;;
    -v | --version)
        echo v0.1.0
        shift
        exit
        ;;
    --)
        shift
        break
        ;;
    *)
        break
        ;;
    esac
done

: "${1?✗ argument parsing failed: missing positional argument ‘SPEC’}"
case "${1}" in
all | perf | c | c++ | go | java | lisp | nodejs | php | python | ruby)
    SPEC=${1}
    ;;
*)
    echo "✗ argument parsing failed: acceptable values for ‘SPEC’ are all | perf | c | c++ | go | java | lisp | nodejs | php | python | ruby" 1>&2
    exit 1
    ;;
esac
shift

if (( $# > 0 )); then
    echo "✗ argument parsing failed: unrecognizable argument ‘${1}’" 1>&2
    exit 1
fi

if [ ! -d "${ROOT}" ]; then
    echo "✗ not a directory: ‘${ROOT}’" 1>&2
    exit 1
elif [ ! -r "${ROOT}" ]; then
    echo "✗ read permission not granted: ‘${ROOT}’" 1>&2
    exit 1
fi

readonly prefix=---------------------------
readonly suffix=---------------------------------

register_lint () {
    local instance=${1}
    local fname=${2}
    local item=${3}
    shift 3

    case "${item}" in
    whitespace)
        if grep -q '\s$' "${instance}"; then
            echo '>>>> TRAILING WHITESPACE <<<<'
            printf '\t\t%s    [%s]\n' "${prefix}" "${fname}"
        fi
        ;;
    *)
        return 1
        ;;
    esac
}

run_style_check () {
    local instance
    local fname
    case "${1}" in
    c)
        echo "${prefix}[ ${lang[${1}]} ]${suffix:${#lang[${1}]}}"

        for instance in $(find -L "${ROOT}" -type f -name "*.c" | sort); do
            fname=$(basename "${instance}" .c)

            diff --unified "${instance}" <(clang-format --style '{ColumnLimit: 0, IndentWidth: 4, SortIncludes: true, SpaceAfterCStyleCast: true}' "${instance}") || true
            clang-tidy "${instance}" -- -std=c18 -x c

            infer run -- gcc -c -std=c18 -x c "${instance}"
            rm --force --recursive infer-out "${fname}.o"
            infer run -- clang -c -std=c18 -x c "${instance}"
            rm --force --recursive infer-out "${fname}.o"

            printf '\t\t%s    [%s]\n' "${prefix}" "${fname}"
        done

        for instance in $(find -L "${ROOT}" -type f -name "*.h" | sort); do
            fname=$(basename "${instance}" .h)

            diff --unified "${instance}" <(clang-format --style '{ColumnLimit: 0, IndentWidth: 4, SortIncludes: true, SpaceAfterCStyleCast: true}' "${instance}") || true
            clang-tidy "${instance}" -- -std=c18 -x c

            infer run -- gcc -c -std=c18 -x c "${instance}"
            rm --force --recursive infer-out "${fname}.o"
            infer run -- clang -c -std=c18 -x c "${instance}"
            rm --force --recursive infer-out "${fname}.o"

            printf '\t\t%s    [%s]\n' "${prefix}" "${fname}"
        done
        ;;
    c++)
        echo "${prefix}[ ${lang[${1}]} ]${suffix:${#lang[${1}]}}"

        for instance in $(find -L "${ROOT}" -type f -name "*.cpp" | sort); do
            fname=$(basename "${instance}" .cpp)

            diff --unified "${instance}" <(clang-format --style '{AccessModifierOffset: -4, ColumnLimit: 0, FixNamespaceComments: false, IndentWidth: 4, NamespaceIndentation: All, SortIncludes: true}' "${instance}") || true
            clang-tidy "${instance}" -- -std=c++17 -x c++

            infer run -- g++ -c -std=c++17 -x c++ "${instance}"
            rm --force --recursive infer-out "${fname}.o"
            infer run -- clang++ -c -std=c++17 -x c++ "${instance}"
            rm --force --recursive infer-out "${fname}.o"

            printf '\t\t%s    [%s]\n' "${prefix}" "${fname}"
        done

        for instance in $(find -L "${ROOT}" -type f -name "*.hpp" | sort); do
            fname=$(basename "${instance}" .hpp)

            diff --unified "${instance}" <(clang-format --style '{AccessModifierOffset: -4, ColumnLimit: 0, FixNamespaceComments: false, IndentWidth: 4, NamespaceIndentation: All, SortIncludes: true}' "${instance}") || true
            clang-tidy "${instance}" -- -std=c++17 -x c++

            infer run -- g++ -c -std=c++17 -x c++ "${instance}"
            rm --force --recursive infer-out "${fname}.o"
            infer run -- clang++ -c -std=c++17 -x c++ "${instance}"
            rm --force --recursive infer-out "${fname}.o"

            printf '\t\t%s    [%s]\n' "${prefix}" "${fname}"
        done
        ;;
    go)
        echo "${prefix}[ ${lang[${1}]} ]${suffix:${#lang[${1}]}}"

        for instance in $(find -L "${ROOT}" -type f -name "*.go" | sort); do
            fname=$(basename "${instance}" .go)

            diff --unified "${instance}" <(gofmt -s "${instance}" | expand --tabs 4) || true
            go tool fix -diff "${instance}"
            go vet "${instance}"

            golint "${instance}"
            golangci-lint run "${instance}" || true

            printf '\t\t%s    [%s]\n' "${prefix}" "${fname}"
        done
        ;;
    java)
        echo "${prefix}[ ${lang[${1}]} ]${suffix:${#lang[${1}]}}"

        for instance in $(find -L "${ROOT}" -type f -name "*.java" | sort); do
            fname=$(basename "${instance}" .java)

            unset _JAVA_OPTIONS

            java -jar /usr/local/share/java/checkstyle.jar -c /sun_checks.xml "${instance}" || true
            java -jar /usr/local/share/java/checkstyle.jar -c /google_checks.xml "${instance}" || true

            pmd-run pmd -dir "${instance}" -failOnViolation false -language java -no-cache -rulesets rulesets/java/quickstart.xml

            infer run -- javac -d local_build "${instance}"
            java -jar /usr/local/share/java/spotbugs.jar -textui local_build
            rm --force --recursive infer-out local_build

            printf '\t\t%s    [%s]\n' "${prefix}" "${fname}"
        done
        ;;
    lisp)
        echo "${prefix}[ ${lang[${1}]} ]${suffix:${#lang[${1}]}}"

        for instance in $(find -L "${ROOT}" -type f -name "*.lisp" | sort); do
            fname=$(basename "${instance}" .lisp)

            register_lint "${instance}" "${fname}" whitespace
        done
        ;;
    nodejs)
        echo "${prefix}[ ${lang[${1}]} ]${suffix:${#lang[${1}]}}"

        for instance in $(find -L "${ROOT}" -type f -name "*.js" | sort); do
            fname=$(basename "${instance}" .js)

            standard --verbose "${instance#${PWD}/}" || true
            xo --no-semicolon --space=4 "${instance}" || true

            printf '\t\t%s    [%s]\n' "${prefix}" "${fname}"
        done
        ;;
    php)
        echo "${prefix}[ ${lang[${1}]} ]${suffix:${#lang[${1}]}}"

        for instance in $(find -L "${ROOT}" -type f -name "*.php" | sort); do
            fname=$(basename "${instance}" .php)

            phpmd --ignore-violations-on-exit "${instance}" ansi cleancode,codesize,controversial,design,naming,unusedcode

            printf '\t\t%s    [%s]\n' "${prefix}" "${fname}"
        done
        ;;
    python)
        echo "${prefix}[ ${lang[${1}]} ]${suffix:${#lang[${1}]}}"

        for instance in $(find -L "${ROOT}" -type f -name "*.py" | sort); do
            fname=$(basename "${instance}" .py)

            black --diff --line-length 128 "${instance}"
            pylint --exit-zero --persistent no "${instance}"
            pyflakes3 "${instance}" || true
            MYPYPATH=${PYTHONPATH} mypy --cache-dir /dev/null "${instance}" || true
            bandit "${instance}" || true

            printf '\t\t%s    [%s]\n' "${prefix}" "${fname}"
        done
        ;;
    ruby)
        echo "${prefix}[ ${lang[${1}]} ]${suffix:${#lang[${1}]}}"

        for instance in $(find -L "${ROOT}" -type f -name "*.rb" | sort); do
            fname=$(basename "${instance}" .rb)

            rubocop "${instance}" || true

            printf '\t\t%s    [%s]\n' "${prefix}" "${fname}"
        done
        ;;
    *)
        return 1
        ;;
    esac
}

echo '====================== style check starts ======================'

case "${SPEC}" in
all)
    for k in "${!lang[@]}"; do
        run_style_check "${k}"
    done
    ;;
perf)
    for k in "${!lang[@]}"; do
        time run_style_check "${k}"
    done
    ;;
*)
    run_style_check "${SPEC}"
    ;;
esac

echo '===================== style check finished ====================='

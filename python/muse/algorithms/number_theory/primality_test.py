from collections.abc import Callable

from muse.algorithms.number_theory import primality, tests
from muse.util import test_runner

COMPOSITE = "Composite"
NONE = "None"
PRIME = "Prime"

sample = [
    {"n": 0, "category": NONE},
    {"n": 1, "category": NONE},
    {"n": 2, "category": PRIME},
    {"n": 3, "category": PRIME},
    {"n": 4, "category": COMPOSITE},
    {"n": 5, "category": PRIME},
    {"n": 6, "category": COMPOSITE},
    {"n": 7, "category": PRIME},
    {"n": 8, "category": COMPOSITE},
    {"n": 9, "category": COMPOSITE},
    {"n": 10, "category": COMPOSITE},
    {"n": 11, "category": PRIME},
    {"n": 12, "category": COMPOSITE},
    {"n": 13, "category": PRIME},
    {"n": 14, "category": COMPOSITE},
    {"n": 15, "category": COMPOSITE},
    {"n": 16, "category": COMPOSITE},
    {"n": 17, "category": PRIME},
    {"n": 18, "category": COMPOSITE},
    {"n": 19, "category": PRIME},
    {"n": 20, "category": COMPOSITE},
    {"n": 21, "category": COMPOSITE},
    {"n": 22, "category": COMPOSITE},
    {"n": 23, "category": PRIME},
    {"n": 24, "category": COMPOSITE},
    {"n": 25, "category": COMPOSITE},
    {"n": 26, "category": COMPOSITE},
    {"n": 27, "category": COMPOSITE},
    {"n": 28, "category": COMPOSITE},
    {"n": 29, "category": PRIME},
    {"n": 30, "category": COMPOSITE},
    {"n": 31, "category": PRIME},
    {"n": 32, "category": COMPOSITE},
    {"n": 33, "category": COMPOSITE},
    {"n": 34, "category": COMPOSITE},
    {"n": 35, "category": COMPOSITE},
    {"n": 36, "category": COMPOSITE},
    {"n": 37, "category": PRIME},
    {"n": 38, "category": COMPOSITE},
    {"n": 39, "category": COMPOSITE},
    {"n": 40, "category": COMPOSITE},
    {"n": 41, "category": PRIME},
    {"n": 42, "category": COMPOSITE},
    {"n": 43, "category": PRIME},
    {"n": 44, "category": COMPOSITE},
    {"n": 45, "category": COMPOSITE},
    {"n": 46, "category": COMPOSITE},
    {"n": 47, "category": PRIME},
    {"n": 48, "category": COMPOSITE},
    {"n": 49, "category": COMPOSITE},
    {"n": 50, "category": COMPOSITE},
    {"n": 51, "category": COMPOSITE},
    {"n": 52, "category": COMPOSITE},
    {"n": 53, "category": PRIME},
    {"n": 54, "category": COMPOSITE},
    {"n": 55, "category": COMPOSITE},
    {"n": 56, "category": COMPOSITE},
    {"n": 57, "category": COMPOSITE},
    {"n": 58, "category": COMPOSITE},
    {"n": 59, "category": PRIME},
    {"n": 60, "category": COMPOSITE},
    {"n": 61, "category": PRIME},
    {"n": 62, "category": COMPOSITE},
    {"n": 63, "category": COMPOSITE},
    {"n": 64, "category": COMPOSITE},
    {"n": 65, "category": COMPOSITE},
    {"n": 66, "category": COMPOSITE},
    {"n": 67, "category": PRIME},
    {"n": 68, "category": COMPOSITE},
    {"n": 69, "category": COMPOSITE},
    {"n": 70, "category": COMPOSITE},
    {"n": 71, "category": PRIME},
    {"n": 72, "category": COMPOSITE},
    {"n": 73, "category": PRIME},
    {"n": 74, "category": COMPOSITE},
    {"n": 75, "category": COMPOSITE},
    {"n": 76, "category": COMPOSITE},
    {"n": 77, "category": COMPOSITE},
    {"n": 78, "category": COMPOSITE},
    {"n": 79, "category": PRIME},
    {"n": 80, "category": COMPOSITE},
    {"n": 81, "category": COMPOSITE},
    {"n": 82, "category": COMPOSITE},
    {"n": 83, "category": PRIME},
    {"n": 84, "category": COMPOSITE},
    {"n": 85, "category": COMPOSITE},
    {"n": 86, "category": COMPOSITE},
    {"n": 87, "category": COMPOSITE},
    {"n": 88, "category": COMPOSITE},
    {"n": 89, "category": PRIME},
    {"n": 90, "category": COMPOSITE},
    {"n": 91, "category": COMPOSITE},
    {"n": 92, "category": COMPOSITE},
    {"n": 93, "category": COMPOSITE},
    {"n": 94, "category": COMPOSITE},
    {"n": 95, "category": COMPOSITE},
    {"n": 96, "category": COMPOSITE},
    {"n": 97, "category": PRIME},
    {"n": 98, "category": COMPOSITE},
    {"n": 99, "category": COMPOSITE},
    {"n": 100, "category": COMPOSITE},
    {"n": 101, "category": PRIME},
    {"n": 102, "category": COMPOSITE},
    {"n": 103, "category": PRIME},
    {"n": 104, "category": COMPOSITE},
    {"n": 105, "category": COMPOSITE},
    {"n": 106, "category": COMPOSITE},
    {"n": 107, "category": PRIME},
    {"n": 108, "category": COMPOSITE},
    {"n": 109, "category": PRIME},
    {"n": 110, "category": COMPOSITE},
    {"n": 111, "category": COMPOSITE},
    {"n": 112, "category": COMPOSITE},
    {"n": 113, "category": PRIME},
    {"n": 114, "category": COMPOSITE},
    {"n": 115, "category": COMPOSITE},
    {"n": 116, "category": COMPOSITE},
    {"n": 117, "category": COMPOSITE},
    {"n": 118, "category": COMPOSITE},
    {"n": 119, "category": COMPOSITE},
    {"n": 120, "category": COMPOSITE},
    {"n": 121, "category": COMPOSITE},
    {"n": 122, "category": COMPOSITE},
    {"n": 123, "category": COMPOSITE},
    {"n": 124, "category": COMPOSITE},
    {"n": 125, "category": COMPOSITE},
    {"n": 126, "category": COMPOSITE},
    {"n": 127, "category": PRIME},
    {"n": 170, "category": COMPOSITE},
    {"n": 271, "category": PRIME},
    {"n": 357, "category": COMPOSITE},
    {"n": 225, "category": COMPOSITE},
    {"n": 440, "category": COMPOSITE},
    {"n": 235, "category": COMPOSITE},
    {"n": 274, "category": COMPOSITE},
    {"n": 383, "category": PRIME},
    {"n": 313, "category": PRIME},
    {"n": 434, "category": COMPOSITE},
    {"n": 222, "category": COMPOSITE},
    {"n": 137, "category": PRIME},
    {"n": 155, "category": COMPOSITE},
    {"n": 465, "category": COMPOSITE},
    {"n": 249, "category": COMPOSITE},
    {"n": 141, "category": COMPOSITE},
    {"n": 5307, "category": COMPOSITE},
    {"n": 6374, "category": COMPOSITE},
    {"n": 951, "category": COMPOSITE},
    {"n": 7236, "category": COMPOSITE},
    {"n": 2027, "category": PRIME},
    {"n": 2382, "category": COMPOSITE},
    {"n": 2251, "category": PRIME},
    {"n": 757, "category": PRIME},
    {"n": 6678, "category": COMPOSITE},
    {"n": 3206, "category": COMPOSITE},
    {"n": 6257, "category": PRIME},
    {"n": 615, "category": COMPOSITE},
    {"n": 1677, "category": COMPOSITE},
    {"n": 2086, "category": COMPOSITE},
    {"n": 4158, "category": COMPOSITE},
    {"n": 4723, "category": PRIME},
    {"n": 7755, "category": COMPOSITE},
    {"n": 1583, "category": PRIME},
    {"n": 6547, "category": PRIME},
    {"n": 4219, "category": PRIME},
    {"n": 660, "category": COMPOSITE},
    {"n": 7698, "category": COMPOSITE},
    {"n": 3121, "category": PRIME},
    {"n": 3881, "category": PRIME},
    {"n": 2541, "category": COMPOSITE},
    {"n": 4696, "category": COMPOSITE},
    {"n": 4091, "category": PRIME},
    {"n": 5222, "category": COMPOSITE},
    {"n": 4021, "category": PRIME},
    {"n": 5839, "category": PRIME},
    {"n": 6048, "category": COMPOSITE},
    {"n": 5521, "category": PRIME},
    {"n": 47908, "category": COMPOSITE},
    {"n": 35060, "category": COMPOSITE},
    {"n": 47361, "category": COMPOSITE},
    {"n": 48859, "category": PRIME},
    {"n": 56067, "category": COMPOSITE},
    {"n": 70451, "category": PRIME},
    {"n": 9735, "category": COMPOSITE},
    {"n": 19763, "category": PRIME},
    {"n": 97943, "category": PRIME},
    {"n": 9933, "category": COMPOSITE},
    {"n": 61651, "category": PRIME},
    {"n": 11407, "category": COMPOSITE},
    {"n": 8774, "category": COMPOSITE},
    {"n": 48383, "category": PRIME},
    {"n": 51001, "category": PRIME},
    {"n": 73029, "category": COMPOSITE},
    {"n": 27690, "category": COMPOSITE},
    {"n": 30466, "category": COMPOSITE},
    {"n": 71479, "category": PRIME},
    {"n": 84701, "category": PRIME},
    {"n": 28643, "category": PRIME},
    {"n": 57075, "category": COMPOSITE},
    {"n": 99745, "category": COMPOSITE},
    {"n": 100921, "category": COMPOSITE},
    {"n": 40496, "category": COMPOSITE},
    {"n": 9798, "category": COMPOSITE},
    {"n": 41603, "category": PRIME},
    {"n": 46912, "category": COMPOSITE},
    {"n": 49852, "category": COMPOSITE},
    {"n": 55871, "category": PRIME},
    {"n": 10993, "category": PRIME},
    {"n": 79657, "category": PRIME},
    {"n": 609680, "category": COMPOSITE},
    {"n": 180540, "category": COMPOSITE},
    {"n": 147672, "category": COMPOSITE},
    {"n": 819031, "category": PRIME},
    {"n": 149623, "category": PRIME},
    {"n": 1_056_048, "category": COMPOSITE},
    {"n": 483389, "category": PRIME},
    {"n": 452831, "category": PRIME},
    {"n": 415109, "category": PRIME},
    {"n": 185021, "category": PRIME},
    {"n": 715823, "category": PRIME},
    {"n": 744081, "category": COMPOSITE},
    {"n": 1_276_157, "category": PRIME},
    {"n": 192978, "category": COMPOSITE},
    {"n": 631537, "category": PRIME},
    {"n": 554226, "category": COMPOSITE},
    {"n": 653111, "category": PRIME},
    {"n": 607346, "category": COMPOSITE},
    {"n": 452539, "category": PRIME},
    {"n": 815939, "category": PRIME},
    {"n": 247199, "category": COMPOSITE},
    {"n": 1_245_953, "category": PRIME},
    {"n": 974803, "category": PRIME},
    {"n": 185813, "category": PRIME},
    {"n": 1_261_831, "category": PRIME},
    {"n": 443227, "category": PRIME},
    {"n": 1_057_294, "category": COMPOSITE},
    {"n": 427241, "category": PRIME},
    {"n": 627391, "category": PRIME},
    {"n": 1_019_663, "category": PRIME},
    {"n": 629142, "category": COMPOSITE},
    {"n": 164503, "category": PRIME},
    {"n": 6_006_421, "category": PRIME},
    {"n": 9_499_199, "category": PRIME},
    {"n": 12_598_247, "category": PRIME},
    {"n": 13_919_909, "category": PRIME},
    {"n": 8_975_950, "category": COMPOSITE},
    {"n": 6_655_578, "category": COMPOSITE},
    {"n": 2_388_697, "category": PRIME},
    {"n": 14_018_237, "category": COMPOSITE},
    {"n": 7_871_261, "category": PRIME},
    {"n": 1_678_013, "category": PRIME},
    {"n": 2_654_027, "category": PRIME},
    {"n": 10_142_801, "category": PRIME},
    {"n": 2_291_487, "category": COMPOSITE},
    {"n": 3_893_849, "category": PRIME},
    {"n": 1_308_913, "category": COMPOSITE},
    {"n": 14_162_880, "category": COMPOSITE},
]


def derive(fn: Callable[[int], bool], c: object) -> Callable[[], bool]:
    return tests.unique_category_derive(fn, sample, c)


def test_primality() -> bool:
    return (
        derive(primality.is_prime, PRIME)()
        and derive(primality.is_composite, COMPOSITE)()
    )


def main() -> None:
    test_runner.pick(test_primality)


if __name__ == "__main__":
    main()

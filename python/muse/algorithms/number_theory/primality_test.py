from collections.abc import Callable
from typing import Literal

from muse.algorithms.number_theory import primality, tests
from muse.algorithms.number_theory.tests import UniqueCategorySample as Sample
from muse.util import test_runner

type Category = Literal["Prime", "None", "Composite"]
COMPOSITE = "Composite"
NONE = "None"
PRIME = "Prime"

sample = [
    Sample(0, NONE),
    Sample(1, NONE),
    Sample(2, PRIME),
    Sample(3, PRIME),
    Sample(4, COMPOSITE),
    Sample(5, PRIME),
    Sample(6, COMPOSITE),
    Sample(7, PRIME),
    Sample(8, COMPOSITE),
    Sample(9, COMPOSITE),
    Sample(10, COMPOSITE),
    Sample(11, PRIME),
    Sample(12, COMPOSITE),
    Sample(13, PRIME),
    Sample(14, COMPOSITE),
    Sample(15, COMPOSITE),
    Sample(16, COMPOSITE),
    Sample(17, PRIME),
    Sample(18, COMPOSITE),
    Sample(19, PRIME),
    Sample(20, COMPOSITE),
    Sample(21, COMPOSITE),
    Sample(22, COMPOSITE),
    Sample(23, PRIME),
    Sample(24, COMPOSITE),
    Sample(25, COMPOSITE),
    Sample(26, COMPOSITE),
    Sample(27, COMPOSITE),
    Sample(28, COMPOSITE),
    Sample(29, PRIME),
    Sample(30, COMPOSITE),
    Sample(31, PRIME),
    Sample(32, COMPOSITE),
    Sample(33, COMPOSITE),
    Sample(34, COMPOSITE),
    Sample(35, COMPOSITE),
    Sample(36, COMPOSITE),
    Sample(37, PRIME),
    Sample(38, COMPOSITE),
    Sample(39, COMPOSITE),
    Sample(40, COMPOSITE),
    Sample(41, PRIME),
    Sample(42, COMPOSITE),
    Sample(43, PRIME),
    Sample(44, COMPOSITE),
    Sample(45, COMPOSITE),
    Sample(46, COMPOSITE),
    Sample(47, PRIME),
    Sample(48, COMPOSITE),
    Sample(49, COMPOSITE),
    Sample(50, COMPOSITE),
    Sample(51, COMPOSITE),
    Sample(52, COMPOSITE),
    Sample(53, PRIME),
    Sample(54, COMPOSITE),
    Sample(55, COMPOSITE),
    Sample(56, COMPOSITE),
    Sample(57, COMPOSITE),
    Sample(58, COMPOSITE),
    Sample(59, PRIME),
    Sample(60, COMPOSITE),
    Sample(61, PRIME),
    Sample(62, COMPOSITE),
    Sample(63, COMPOSITE),
    Sample(64, COMPOSITE),
    Sample(65, COMPOSITE),
    Sample(66, COMPOSITE),
    Sample(67, PRIME),
    Sample(68, COMPOSITE),
    Sample(69, COMPOSITE),
    Sample(70, COMPOSITE),
    Sample(71, PRIME),
    Sample(72, COMPOSITE),
    Sample(73, PRIME),
    Sample(74, COMPOSITE),
    Sample(75, COMPOSITE),
    Sample(76, COMPOSITE),
    Sample(77, COMPOSITE),
    Sample(78, COMPOSITE),
    Sample(79, PRIME),
    Sample(80, COMPOSITE),
    Sample(81, COMPOSITE),
    Sample(82, COMPOSITE),
    Sample(83, PRIME),
    Sample(84, COMPOSITE),
    Sample(85, COMPOSITE),
    Sample(86, COMPOSITE),
    Sample(87, COMPOSITE),
    Sample(88, COMPOSITE),
    Sample(89, PRIME),
    Sample(90, COMPOSITE),
    Sample(91, COMPOSITE),
    Sample(92, COMPOSITE),
    Sample(93, COMPOSITE),
    Sample(94, COMPOSITE),
    Sample(95, COMPOSITE),
    Sample(96, COMPOSITE),
    Sample(97, PRIME),
    Sample(98, COMPOSITE),
    Sample(99, COMPOSITE),
    Sample(100, COMPOSITE),
    Sample(101, PRIME),
    Sample(102, COMPOSITE),
    Sample(103, PRIME),
    Sample(104, COMPOSITE),
    Sample(105, COMPOSITE),
    Sample(106, COMPOSITE),
    Sample(107, PRIME),
    Sample(108, COMPOSITE),
    Sample(109, PRIME),
    Sample(110, COMPOSITE),
    Sample(111, COMPOSITE),
    Sample(112, COMPOSITE),
    Sample(113, PRIME),
    Sample(114, COMPOSITE),
    Sample(115, COMPOSITE),
    Sample(116, COMPOSITE),
    Sample(117, COMPOSITE),
    Sample(118, COMPOSITE),
    Sample(119, COMPOSITE),
    Sample(120, COMPOSITE),
    Sample(121, COMPOSITE),
    Sample(122, COMPOSITE),
    Sample(123, COMPOSITE),
    Sample(124, COMPOSITE),
    Sample(125, COMPOSITE),
    Sample(126, COMPOSITE),
    Sample(127, PRIME),
    Sample(170, COMPOSITE),
    Sample(271, PRIME),
    Sample(357, COMPOSITE),
    Sample(225, COMPOSITE),
    Sample(440, COMPOSITE),
    Sample(235, COMPOSITE),
    Sample(274, COMPOSITE),
    Sample(383, PRIME),
    Sample(313, PRIME),
    Sample(434, COMPOSITE),
    Sample(222, COMPOSITE),
    Sample(137, PRIME),
    Sample(155, COMPOSITE),
    Sample(465, COMPOSITE),
    Sample(249, COMPOSITE),
    Sample(141, COMPOSITE),
    Sample(5307, COMPOSITE),
    Sample(6374, COMPOSITE),
    Sample(951, COMPOSITE),
    Sample(7236, COMPOSITE),
    Sample(2027, PRIME),
    Sample(2382, COMPOSITE),
    Sample(2251, PRIME),
    Sample(757, PRIME),
    Sample(6678, COMPOSITE),
    Sample(3206, COMPOSITE),
    Sample(6257, PRIME),
    Sample(615, COMPOSITE),
    Sample(1677, COMPOSITE),
    Sample(2086, COMPOSITE),
    Sample(4158, COMPOSITE),
    Sample(4723, PRIME),
    Sample(7755, COMPOSITE),
    Sample(1583, PRIME),
    Sample(6547, PRIME),
    Sample(4219, PRIME),
    Sample(660, COMPOSITE),
    Sample(7698, COMPOSITE),
    Sample(3121, PRIME),
    Sample(3881, PRIME),
    Sample(2541, COMPOSITE),
    Sample(4696, COMPOSITE),
    Sample(4091, PRIME),
    Sample(5222, COMPOSITE),
    Sample(4021, PRIME),
    Sample(5839, PRIME),
    Sample(6048, COMPOSITE),
    Sample(5521, PRIME),
    Sample(47908, COMPOSITE),
    Sample(35060, COMPOSITE),
    Sample(47361, COMPOSITE),
    Sample(48859, PRIME),
    Sample(56067, COMPOSITE),
    Sample(70451, PRIME),
    Sample(9735, COMPOSITE),
    Sample(19763, PRIME),
    Sample(97943, PRIME),
    Sample(9933, COMPOSITE),
    Sample(61651, PRIME),
    Sample(11407, COMPOSITE),
    Sample(8774, COMPOSITE),
    Sample(48383, PRIME),
    Sample(51001, PRIME),
    Sample(73029, COMPOSITE),
    Sample(27690, COMPOSITE),
    Sample(30466, COMPOSITE),
    Sample(71479, PRIME),
    Sample(84701, PRIME),
    Sample(28643, PRIME),
    Sample(57075, COMPOSITE),
    Sample(99745, COMPOSITE),
    Sample(100921, COMPOSITE),
    Sample(40496, COMPOSITE),
    Sample(9798, COMPOSITE),
    Sample(41603, PRIME),
    Sample(46912, COMPOSITE),
    Sample(49852, COMPOSITE),
    Sample(55871, PRIME),
    Sample(10993, PRIME),
    Sample(79657, PRIME),
    Sample(609680, COMPOSITE),
    Sample(180540, COMPOSITE),
    Sample(147672, COMPOSITE),
    Sample(819031, PRIME),
    Sample(149623, PRIME),
    Sample(1_056_048, COMPOSITE),
    Sample(483389, PRIME),
    Sample(452831, PRIME),
    Sample(415109, PRIME),
    Sample(185021, PRIME),
    Sample(715823, PRIME),
    Sample(744081, COMPOSITE),
    Sample(1_276_157, PRIME),
    Sample(192978, COMPOSITE),
    Sample(631537, PRIME),
    Sample(554226, COMPOSITE),
    Sample(653111, PRIME),
    Sample(607346, COMPOSITE),
    Sample(452539, PRIME),
    Sample(815939, PRIME),
    Sample(247199, COMPOSITE),
    Sample(1_245_953, PRIME),
    Sample(974803, PRIME),
    Sample(185813, PRIME),
    Sample(1_261_831, PRIME),
    Sample(443227, PRIME),
    Sample(1_057_294, COMPOSITE),
    Sample(427241, PRIME),
    Sample(627391, PRIME),
    Sample(1_019_663, PRIME),
    Sample(629142, COMPOSITE),
    Sample(164503, PRIME),
    Sample(6_006_421, PRIME),
    Sample(9_499_199, PRIME),
    Sample(12_598_247, PRIME),
    Sample(13_919_909, PRIME),
    Sample(8_975_950, COMPOSITE),
    Sample(6_655_578, COMPOSITE),
    Sample(2_388_697, PRIME),
    Sample(14_018_237, COMPOSITE),
    Sample(7_871_261, PRIME),
    Sample(1_678_013, PRIME),
    Sample(2_654_027, PRIME),
    Sample(10_142_801, PRIME),
    Sample(2_291_487, COMPOSITE),
    Sample(3_893_849, PRIME),
    Sample(1_308_913, COMPOSITE),
    Sample(14_162_880, COMPOSITE),
]


def derive(fn: Callable[[int], bool], c: Category) -> Callable[[], bool]:
    return tests.unique_category_derive(fn, sample, c)


def test_primality() -> bool:
    return (
        derive(primality.is_prime, PRIME)()
        and derive(primality.is_composite, COMPOSITE)()
    )


def main() -> None:
    test_runner.pick(test_primality)


if __name__ == "__main__":
    main()

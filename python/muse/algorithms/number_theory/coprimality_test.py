from collections.abc import Callable

from muse.algorithms.number_theory import coprimality, tests
from muse.algorithms.number_theory.tests import MNUniqueCategorySample as Sample
from muse.util import test_runner

sample = [
    Sample(0, 1, True),
    Sample(1, 0, True),
    Sample(1, 1, True),
    Sample(-1, -1, True),
    Sample(15, -45, False),
    Sample(-7, 51, True),
    Sample(-3, 75, False),
    Sample(-84, -32, False),
    Sample(-21, -71, True),
    Sample(89, -11, True),
    Sample(-40, -9, True),
    Sample(92, 26, False),
    Sample(14, -95, True),
    Sample(5, -99, True),
    Sample(-45, -57, False),
    Sample(59, -97, True),
    Sample(-16, 37, True),
    Sample(97, 49, True),
    Sample(5998, -3871, True),
    Sample(-2152, -2909, True),
    Sample(8823, 629, False),
    Sample(7589, -7035, True),
    Sample(-8669, 6398, True),
    Sample(1059, 3522, False),
    Sample(9892, -2990, False),
    Sample(-1819, 4740, True),
    Sample(7900, -7244, False),
    Sample(8072, -1226, False),
    Sample(-6875, 5777, True),
    Sample(-828, 8859, False),
    Sample(-3929, 1143, True),
    Sample(-5397, 1880, True),
    Sample(-9397, -4343, True),
    Sample(2389, -4026, True),
    Sample(-6838, -7802, False),
    Sample(-6118, 7944, False),
    Sample(1408, -8483, True),
    Sample(-507, 3510, False),
    Sample(5030, -4818, False),
    Sample(2563, -1867, True),
    Sample(3317, -4585, True),
    Sample(-2448, -2215, True),
    Sample(-1982, -3811, True),
    Sample(645, 7907, True),
    Sample(5812, 1657, True),
    Sample(3944, -5997, True),
    Sample(-2410, -6522, False),
    Sample(4565, 9055, False),
    Sample(8478, 1099, False),
    Sample(6444, -7298, False),
    Sample(7606, -7006, False),
    Sample(2491, -2017, True),
    Sample(7151, -9724, True),
    Sample(2958, -5697, False),
    Sample(5134, -7701, False),
    Sample(-3544, 9042, False),
    Sample(8826, -4548, False),
    Sample(6794, -5322, False),
    Sample(-6906, 7502, False),
    Sample(172, 8480, False),
    Sample(8244, 4622, False),
    Sample(-7315, 5253, True),
    Sample(7011, 4285, True),
    Sample(-3132, -4999, True),
    Sample(-7332, -655, True),
    Sample(9661, -1750, True),
    Sample(7560, -3128, False),
    Sample(1334, 6234, False),
    Sample(8075, 6450, False),
    Sample(3283, 8980, True),
    Sample(3364, 8482, False),
    Sample(4909, 8302, True),
    Sample(9332, -2523, True),
    Sample(-8515, 5209, True),
    Sample(-1624, 7640, False),
    Sample(-6463, 2562, True),
    Sample(7912, 5868, False),
    Sample(-4825, -2173, True),
    Sample(28876, 30106, False),
    Sample(-929840, 887043, True),
    Sample(684923, -588038, True),
    Sample(-291411, -299801, True),
    Sample(-905447, -402122, True),
    Sample(830872, -223425, True),
    Sample(831033, -753398, True),
    Sample(-575558, 711716, False),
    Sample(-312296, 515492, False),
    Sample(595308, 963205, False),
    Sample(-770718, -388434, False),
    Sample(353889, 330806, True),
    Sample(-174566, 613742, False),
    Sample(-884075, 26687, True),
    Sample(390743, 204874, True),
    Sample(930615, 86524, True),
    Sample(-84_945_524, 15_427_487, True),
    Sample(76_038_602, -89_688_904, False),
    Sample(50_294_214, -65_802_481, True),
    Sample(83_436_075, 44_248_708, True),
    Sample(54_031_677, 92_370_464, True),
    Sample(-6_019_575, -1_302_029, True),
    Sample(86_952_873, -75_470_243, True),
    Sample(-53_215_372, 28_947_490, False),
    Sample(-37_109_442, 75_623_090, False),
    Sample(-11_656_183, 16_147_085, True),
    Sample(86_439_843, -12_134_914, True),
    Sample(-52_977_427, 48_349_835, True),
    Sample(16_234_161, 26_103_566, True),
    Sample(73_756_826, -6_586_797, True),
    Sample(6_836_355, 11_529_043, True),
    Sample(29_864_126, -80_782_077, True),
    Sample(1_646_787_325, 1_961_513_442, True),
    Sample(-1_755_035_190, -1_801_169_490, False),
    Sample(-1_509_018_194, 1_829_751_775, True),
    Sample(-720_160_017, -1_425_309_680, True),
    Sample(1_216_287_038, 1_821_933_798, False),
    Sample(-1_925_479_607, -1_842_455_762, True),
    Sample(-795_996_486, -1_859_155_567, True),
    Sample(-367_280_505, 321_267_794, True),
    Sample(829_304_526, -1_575_808_585, True),
    Sample(1_457_917_042, 1_083_382_210, False),
    Sample(-377_130_535, 1_526_538_188, True),
    Sample(-1_109_347_700, -1_819_333_109, True),
    Sample(-1_740_794_578, 278_770_346, False),
    Sample(448_156_480, -1_008_775_746, False),
    Sample(442_691_160, 1_680_572_092, False),
    Sample(1_241_208_470, -647_438_045, False),
    Sample(2_147_483_647, -561_158_902, True),
    Sample(761_395_308, -2_147_483_647, True),
]


def derive(fn: Callable[[int, int], bool]) -> Callable[[], bool]:
    return tests.mn_unique_category_derive(fn, sample, True)


def test_coprimality() -> bool:
    return (
        derive(coprimality.reduce_to_binary_gcd)()
        and derive(coprimality.reduce_to_euclidean)()
    )


def main() -> None:
    test_runner.pick(test_coprimality)


if __name__ == "__main__":
    main()

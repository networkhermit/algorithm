require "muse/algorithms/number_theory/LeastCommonMultiple"
require "muse/util/TestRunner"

def testLeastCommonMultiple
  sample = [
    [1, 1, 1],
    [-1, -1, 1],
    [-85, -8, 680],
    [33, -2, 66],
    [8, 32, 32],
    [8, 89, 712],
    [16, 78, 624],
    [-66, -2, 66],
    [-50, -62, 1550],
    [12, -25, 300],
    [-74, -25, 1850],
    [4, 24, 24],
    [90, 29, 2610],
    [-62, -85, 5270],
    [-9, -50, 450],
    [90, -59, 5310],
    [-8732, -1743, 15_219_876],
    [-8329, 8430, 70_213_470],
    [3300, -1326, 729_300],
    [-5969, -523, 3_121_787],
    [-7044, -8745, 20_533_260],
    [-4683, 2491, 11_665_353],
    [9729, 4329, 4_679_649],
    [-871, 3189, 2_777_619],
    [-1158, -3122, 1_807_638],
    [9912, -9910, 49_113_960],
    [4924, 5842, 14_383_004],
    [3980, -6455, 5_138_180],
    [5420, -1507, 8_167_940],
    [-1090, 7747, 8_444_230],
    [-8008, 7290, 29_189_160],
    [-2260, -6189, 13_987_140],
    [-962, 9376, 4_509_856],
    [-351, 8756, 3_073_356],
    [-171, 8401, 1_436_571],
    [-3110, -7937, 24_684_070],
    [6362, 1928, 6_132_968],
    [-8230, 964, 3_966_860],
    [-5791, 6186, 35_823_126],
    [-4204, 9556, 10_043_356],
    [-3338, 6848, 11_429_312],
    [-760, 8766, 3_331_080],
    [-1958, 4928, 438_592],
    [-3830, -107, 409_810],
    [-7809, 9720, 25_301_160],
    [7665, 209, 1_601_985],
    [-6060, 4881, 9_859_620],
    [2346, -9979, 1_377_102],
    [7125, -5604, 13_309_500],
    [9862, 3015, 29_733_930],
    [-1148, 8092, 331_772],
    [8627, 3929, 33_895_483],
    [-5320, 8927, 47_491_640],
    [-2301, -8803, 20_255_703],
    [6395, -8793, 56_231_235],
    [6278, -2847, 244_842],
    [1623, 3406, 5_527_938],
    [-3974, 1259, 5_003_266],
    [-4014, -3066, 2_051_154],
    [7546, -3833, 28_923_818],
    [4058, -4338, 8_801_802],
    [5066, 7450, 126_650],
    [-9458, -5234, 24_751_586],
    [4142, 5319, 22_031_298],
    [4119, -9963, 13_679_199],
    [813, 1892, 1_538_196],
    [4375, 9055, 7_923_125],
    [388, -4329, 1_679_652],
    [3927, 5720, 2_042_040],
    [5099, -5563, 28_365_737],
    [-4174, 4772, 9_959_164],
    [-8829, 6842, 60_408_018],
    [9834, 8283, 2_468_334],
    [-6028, -2949, 17_776_572],
    [2627, -2463, 6_470_301],
    [9431, -5198, 49_022_338],
    [4553, 6198, 28_219_494],
    [1368, -8772, 1_000_008],
    [-43_336, -36_185, 1_568_113_160],
    [33_606, -19_136, 321_542_208],
    [-23_381, 31_250, 730_656_250],
    [-22_377, -22_397, 501_177_669],
    [-22_766, -10_042, 114_308_086],
    [-37_379, -13_431, 502_037_349],
    [-23_248, -18_591, 432_203_568],
    [-34_910, 37_688, 657_844_040],
    [-29_156, 26_259, 765_607_404],
    [33_346, 19_239, 641_543_694],
    [-31_634, 13_587, 429_811_158],
    [22_300, 14_536, 81_038_200],
    [-25_315, 26_148, 661_936_620],
    [-21_579, -43_116, 310_133_388],
    [-25_141, 37_870, 952_089_670],
    [23_741, 10_471, 248_592_011],
    [26_852, -41_498, 557_152_148],
    [26_627, -21_629, 575_915_383],
    [-13_538, -16_865, 228_318_370],
    [25_331, 31_258, 791_796_398],
    [33_885, 13_483, 456_871_455],
    [-43_671, -16_383, 238_487_331],
    [-29_483, 26_616, 784_719_528],
    [15_792, -11_008, 10_864_896],
    [23_749, 40_466, 961_027_034],
    [-37_432, -42_397, 1_587_004_504],
    [-46_035, -24_237, 123_972_255],
    [-38_120, 10_830, 41_283_960],
    [-11_808, -10_396, 30_688_992],
    [-15_667, -15_508, 242_963_836],
    [-15_336, -35_057, 537_634_152],
    [31_050, -13_757, 427_154_850],
    [42_602, -20_701, 881_904_002],
    [-20_505, 18_475, 75_765_975],
    [35_445, 12_527, 444_019_515],
    [-20_600, -23_702, 244_130_600],
    [21_432, 15_715, 336_803_880],
    [-24_635, 45_838, 86_863_010],
    [20_616, 41_256, 35_438_904],
    [-40_536, 29_009, 1_175_908_824],
    [-29_015, -40_786, 1_183_405_790],
    [17_092, -30_650, 261_934_900],
    [-44_577, 31_261, 1_393_521_597],
    [-35_517, 13_916, 494_254_572],
    [-22_680, 39_616, 112_311_360],
    [33_207, -33_473, 1_111_537_911],
    [30_250, -28_845, 174_512_250],
    [45_203, -23_693, 1_070_994_679],
    [46_340, 46_341, 2_147_441_940],
    [-46_340, -46_341, 2_147_441_940]
  ]

  sample.each_index do |i|
    return false if LeastCommonMultiple.reduceToBinaryGCD(sample[i][0], sample[i][1]) != sample[i][2]
  end

  sample.each_index do |i|
    return false if LeastCommonMultiple.reduceToEuclidean(sample[i][0], sample[i][1]) != sample[i][2]
  end

  true
end

TestRunner.pick(testLeastCommonMultiple) if __FILE__ == $PROGRAM_NAME
